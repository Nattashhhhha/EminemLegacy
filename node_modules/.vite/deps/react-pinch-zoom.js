import {
  __commonJS,
  require_react
} from "./chunk-4YP5LC2O.js";

// node_modules/react-pinch-zoom/dist/react-pinch-zoom.js
var require_react_pinch_zoom = __commonJS({
  "node_modules/react-pinch-zoom/dist/react-pinch-zoom.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_react());
      else if (typeof define === "function" && define.amd)
        define(["react"], factory);
      else if (typeof exports === "object")
        exports["ReactPinchZoom"] = factory(require_react());
      else
        root["ReactPinchZoom"] = factory(root["React"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_2__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId])
              return installedModules[moduleId].exports;
            var module2 = installedModules[moduleId] = {
              /******/
              exports: {},
              /******/
              id: moduleId,
              /******/
              loaded: false
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.loaded = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.p = "";
          return __webpack_require__(0);
        }([
          /* 0 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            module2.exports = __webpack_require__(1).default;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _react = __webpack_require__(2);
            var _react2 = _interopRequireDefault(_react);
            var _photoswipe = __webpack_require__(3);
            var _photoswipe2 = _interopRequireDefault(_photoswipe);
            var _photoswipeUiDefault = __webpack_require__(4);
            var _photoswipeUiDefault2 = _interopRequireDefault(_photoswipeUiDefault);
            var _classnames = __webpack_require__(5);
            var _classnames2 = _interopRequireDefault(_classnames);
            var _events = __webpack_require__(6);
            var _events2 = _interopRequireDefault(_events);
            var _camelcase = __webpack_require__(7);
            var _camelcase2 = _interopRequireDefault(_camelcase);
            __webpack_require__(8);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self, call) {
              if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var BASE_CLASS = "zvui-pinch";
            var PinchZoom = function(_Component) {
              _inherits(PinchZoom2, _Component);
              function PinchZoom2() {
                var _ref;
                var _temp, _this2, _ret;
                _classCallCheck(this, PinchZoom2);
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = PinchZoom2.__proto__ || Object.getPrototypeOf(PinchZoom2)).call.apply(_ref, [this].concat(args))), _this2), _initialiseProps.call(_this2), _temp), _possibleConstructorReturn(_this2, _ret);
              }
              _createClass(PinchZoom2, [{
                key: "render",
                value: function render() {
                  var id = this.props.id;
                  var className = this.props.className;
                  className = (0, _classnames2.default)([BASE_CLASS, className]).trim();
                  return _react2.default.createElement("div", { id, className, tabIndex: "-1", role: "dialog", ref: (0, _camelcase2.default)(BASE_CLASS) }, _react2.default.createElement("div", { className: BASE_CLASS + "__bg" }), _react2.default.createElement("div", { className: BASE_CLASS + "__scroll-wrap" }, _react2.default.createElement("div", { className: BASE_CLASS + "__container" }, _react2.default.createElement("div", { className: BASE_CLASS + "__item" }), _react2.default.createElement("div", { className: BASE_CLASS + "__item" }), _react2.default.createElement("div", { className: BASE_CLASS + "__item" })), _react2.default.createElement("div", { className: BASE_CLASS + "__ui " + BASE_CLASS + "__ui--hidden" }, _react2.default.createElement("div", { className: BASE_CLASS + "__top-bar" }, _react2.default.createElement("button", { className: BASE_CLASS + "__button " + BASE_CLASS + "__button--close", title: "Close (Esc)" }), _react2.default.createElement("div", { className: BASE_CLASS + "__preloader" })))));
                }
              }]);
              return PinchZoom2;
            }(_react.Component);
            PinchZoom.propTypes = {
              isOpen: _react.PropTypes.bool.isRequired,
              items: _react.PropTypes.array.isRequired,
              options: _react.PropTypes.object,
              onClose: _react.PropTypes.func,
              id: _react.PropTypes.string,
              className: _react.PropTypes.string
            };
            PinchZoom.defaultProps = {
              items: [],
              options: {}
            };
            var _initialiseProps = function _initialiseProps2() {
              var _this3 = this;
              this.state = {
                isOpen: false
              };
              this.componentDidMount = function() {
                var isOpen = _this3.state.isOpen;
                if (isOpen) {
                  _this3.openPhotoSwipe(_this3.props);
                }
              };
              this.componentWillReceiveProps = function(nextProps) {
                var isOpen = _this3.state.isOpen;
                if (nextProps.isOpen) {
                  if (!isOpen) {
                    _this3.openPhotoSwipe(nextProps);
                  } else {
                    _this3.updateItems(nextProps.items);
                  }
                } else if (isOpen) {
                  _this3.closePhotoSwipe();
                }
              };
              this.componentWillUnmount = function() {
                _this3.closePhotoSwipe();
              };
              this.openPhotoSwipe = function(props) {
                var items = props.items;
                var options = props.options;
                var _this = _this3;
                var zvuiPinchElement = _this.refs[(0, _camelcase2.default)(BASE_CLASS)];
                _this.zvuiPinch = new _photoswipe2.default(zvuiPinchElement, _photoswipeUiDefault2.default, items, options);
                _events2.default.forEach(function(event) {
                  var callback = props[event];
                  if (callback || event === "destroy") {
                    _this.zvuiPinch.listen(event, function() {
                      if (callback) {
                        var _args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
                        _args.unshift(_this);
                        callback.apply(void 0, _toConsumableArray(_args));
                      }
                      if (event === "destroy") {
                        _this.handleClose();
                      }
                    });
                  }
                });
                _this.setState({
                  isOpen: true
                }, function() {
                  _this.zvuiPinch.init();
                });
              };
              this.updateItems = function() {
                var items = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                _this3.zvuiPinch.items.length = 0;
                items.forEach(function(item) {
                  _this3.zvuiPinch.items.push(item);
                });
              };
              this.closePhotoSwipe = function() {
                if (!_this3.zvuiPinch) {
                  return;
                }
                _this3.zvuiPinch.close();
              };
              this.handleClose = function() {
                var onClose = _this3.props.onClose;
                _this3.setState({
                  isOpen: false
                }, function() {
                  if (onClose) {
                    onClose();
                  }
                });
              };
            };
            exports2.default = PinchZoom;
          },
          /* 2 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE_2__;
          },
          /* 3 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            "use strict";
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            (function(root, factory) {
              if (true) {
                !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports2, __webpack_require__, exports2, module2) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else if ((typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) === "object") {
                module2.exports = factory(__require, exports2, module2);
              } else {
                root.ZVUIPinch = factory();
              }
            })(void 0, function(require2, exports3, module3) {
              return function(template, UiClass, items, options) {
                var helper = {
                  features: null,
                  bind: function bind(target, type, listener, unbind) {
                    var methodName = (unbind ? "remove" : "add") + "EventListener";
                    type = type.split(" ");
                    for (var i = 0; i < type.length; i++) {
                      if (type[i]) {
                        target[methodName](type[i], listener, false);
                      }
                    }
                  },
                  isArray: function isArray(obj) {
                    return obj instanceof Array;
                  },
                  createEl: function createEl(classes, tag) {
                    var el = document.createElement(tag || "div");
                    if (classes) {
                      el.className = classes;
                    }
                    return el;
                  },
                  getScrollY: function getScrollY() {
                    var yOffset = window.pageYOffset;
                    return yOffset !== void 0 ? yOffset : document.documentElement.scrollTop;
                  },
                  unbind: function unbind(target, type, listener) {
                    helper.bind(target, type, listener, true);
                  },
                  removeClass: function removeClass(el, className) {
                    var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
                    el.className = el.className.replace(reg, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
                  },
                  addClass: function addClass(el, className) {
                    if (!helper.hasClass(el, className)) {
                      el.className += (el.className ? " " : "") + className;
                    }
                  },
                  hasClass: function hasClass(el, className) {
                    return el.className && new RegExp("(^|\\s)" + className + "(\\s|$)").test(el.className);
                  },
                  getChildByClass: function getChildByClass(parentEl, childClassName) {
                    var node = parentEl.firstChild;
                    while (node) {
                      if (helper.hasClass(node, childClassName)) {
                        return node;
                      }
                      node = node.nextSibling;
                    }
                  },
                  arraySearch: function arraySearch(array, value, key) {
                    var i = array.length;
                    while (i--) {
                      if (array[i][key] === value) {
                        return i;
                      }
                    }
                    return -1;
                  },
                  extend: function extend(o1, o2, preventOverwrite) {
                    for (var prop in o2) {
                      if (o2.hasOwnProperty(prop)) {
                        if (preventOverwrite && o1.hasOwnProperty(prop)) {
                          continue;
                        }
                        o1[prop] = o2[prop];
                      }
                    }
                  },
                  easing: {
                    sine: {
                      out: function out(k) {
                        return Math.sin(k * (Math.PI / 2));
                      },
                      inOut: function inOut(k) {
                        return -(Math.cos(Math.PI * k) - 1) / 2;
                      }
                    },
                    cubic: {
                      out: function out(k) {
                        return --k * k * k + 1;
                      }
                    }
                  },
                  /**
                   *
                   * @return {object}
                   *
                   * {
                   *  raf : request animation frame function
                   *  caf : cancel animation frame function
                   *  transfrom : transform property key (with vendor), or null if not supported
                   *  oldIE : IE8 or below
                   * }
                   *
                   */
                  detectFeatures: function detectFeatures() {
                    if (helper.features) {
                      return helper.features;
                    }
                    var helperEl = helper.createEl();
                    var helperStyle = helperEl.style;
                    var vendor = "";
                    var features = {};
                    features.oldIE = document.all && !document.addEventListener;
                    features.touch = "ontouchstart" in window;
                    if (window.requestAnimationFrame) {
                      features.raf = window.requestAnimationFrame;
                      features.caf = window.cancelAnimationFrame;
                    }
                    features.pointerEvent = navigator.pointerEnabled || navigator.msPointerEnabled;
                    if (!features.pointerEvent) {
                      var ua = navigator.userAgent;
                      if (/iP(hone|od)/.test(navigator.platform)) {
                        var v = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
                        if (v && v.length > 0) {
                          v = parseInt(v[1], 10);
                          if (v >= 1 && v < 8) {
                            features.isOldIOSPhone = true;
                          }
                        }
                      }
                      var match = ua.match(/Android\s([0-9\.]*)/);
                      var androidversion = match ? match[1] : 0;
                      androidversion = parseFloat(androidversion);
                      if (androidversion >= 1) {
                        if (androidversion < 4.4) {
                          features.isOldAndroid = true;
                        }
                        features.androidVersion = androidversion;
                      }
                      features.isMobileOpera = /opera mini|opera mobi/i.test(ua);
                    }
                    var styleChecks = ["transform", "perspective", "animationName"];
                    var vendors = ["", "webkit", "Moz", "ms", "O"];
                    var styleCheckItem = void 0;
                    var styleName = void 0;
                    for (var i = 0; i < 4; i++) {
                      vendor = vendors[i];
                      for (var a = 0; a < 3; a++) {
                        styleCheckItem = styleChecks[a];
                        styleName = vendor + (vendor ? styleCheckItem.charAt(0).toUpperCase() + styleCheckItem.slice(1) : styleCheckItem);
                        if (!features[styleCheckItem] && styleName in helperStyle) {
                          features[styleCheckItem] = styleName;
                        }
                      }
                      if (vendor && !features.raf) {
                        vendor = vendor.toLowerCase();
                        features.raf = window[vendor + "RequestAnimationFrame"];
                        if (features.raf) {
                          features.caf = window[vendor + "CancelAnimationFrame"] || window[vendor + "CancelRequestAnimationFrame"];
                        }
                      }
                    }
                    if (!features.raf) {
                      (function() {
                        var lastTime = 0;
                        features.raf = function(fn) {
                          var currTime = (/* @__PURE__ */ new Date()).getTime();
                          var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                          var id = window.setTimeout(function() {
                            fn(currTime + timeToCall);
                          }, timeToCall);
                          lastTime = currTime + timeToCall;
                          return id;
                        };
                        features.caf = function(id) {
                          clearTimeout(id);
                        };
                      })();
                    }
                    features.svg = !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect;
                    helper.features = features;
                    return features;
                  }
                };
                helper.detectFeatures();
                if (helper.features.oldIE) {
                  helper.bind = function(target, type, listener, unbind) {
                    type = type.split(" ");
                    var methodName = (unbind ? "detach" : "attach") + "Event";
                    var evName = void 0;
                    var _handleEv = function _handleEv2() {
                      listener.handleEvent.call(listener);
                    };
                    for (var i = 0; i < type.length; i++) {
                      evName = type[i];
                      if (evName) {
                        if ((typeof listener === "undefined" ? "undefined" : _typeof(listener)) === "object" && listener.handleEvent) {
                          if (!unbind) {
                            listener["oldIE" + evName] = _handleEv;
                          } else {
                            if (!listener["oldIE" + evName]) {
                              return false;
                            }
                          }
                          target[methodName]("on" + evName, listener["oldIE" + evName]);
                        } else {
                          target[methodName]("on" + evName, listener);
                        }
                      }
                    }
                  };
                }
                var self = this;
                var DOUBLE_TAP_RADIUS = 25;
                var NUM_HOLDERS = 3;
                var _options = {
                  allowPanToNext: true,
                  spacing: 0.12,
                  bgOpacity: 1,
                  mouseUsed: false,
                  loop: true,
                  pinchToClose: true,
                  closeOnScroll: true,
                  closeOnVerticalDrag: true,
                  verticalDragRange: 0.75,
                  hideAnimationDuration: 333,
                  showAnimationDuration: 333,
                  showHideOpacity: false,
                  focus: true,
                  escKey: true,
                  arrowKeys: true,
                  mainScrollEndFriction: 0.35,
                  panEndFriction: 0.35,
                  isClickableElement: function isClickableElement(el) {
                    return el.tagName === "A";
                  },
                  getDoubleTapZoom: function getDoubleTapZoom(isMouseClick, item) {
                    if (isMouseClick) {
                      return 1;
                    } else {
                      return item.initialZoomLevel < 0.7 ? 1 : 1.33;
                    }
                  },
                  maxSpreadZoom: 1.33,
                  modal: true,
                  // not fully implemented yet
                  scaleMode: "fit"
                };
                helper.extend(_options, options);
                var _getEmptyPoint = function _getEmptyPoint2() {
                  return {
                    x: 0,
                    y: 0
                  };
                };
                var _isOpen = void 0;
                var _isDestroying = void 0;
                var _closedByScroll = void 0;
                var _currentItemIndex = void 0;
                var _containerStyle = void 0;
                var _containerShiftIndex = void 0;
                var _currPanDist = _getEmptyPoint();
                var _startPanOffset = _getEmptyPoint();
                var _panOffset = _getEmptyPoint();
                var _upMoveEvents = void 0;
                var _downEvents = void 0;
                var _globalEventHandlers = void 0;
                var _viewportSize = {};
                var _currZoomLevel = void 0;
                var _startZoomLevel = void 0;
                var _translatePrefix = void 0;
                var _translateSufix = void 0;
                var _updateSizeInterval = void 0;
                var _itemsNeedUpdate = void 0;
                var _currPositionIndex = 0;
                var _offset = {};
                var _slideSize = _getEmptyPoint();
                var _itemHolders = void 0;
                var _prevItemIndex = void 0;
                var _indexDiff = 0;
                var _dragStartEvent = void 0;
                var _dragMoveEvent = void 0;
                var _dragEndEvent = void 0;
                var _dragCancelEvent = void 0;
                var _transformKey = void 0;
                var _pointerEventEnabled = void 0;
                var _isFixedPosition = true;
                var _likelyTouchDevice = void 0;
                var _modules = [];
                var _requestAF = void 0;
                var _cancelAF = void 0;
                var _initalClassName = void 0;
                var _initalWindowScrollY = void 0;
                var _oldIE = void 0;
                var _currentWindowScrollY = void 0;
                var _features = void 0;
                var _windowVisibleSize = {};
                var _renderMaxResolution = false;
                var _registerModule = function _registerModule2(name, module4) {
                  helper.extend(self, module4.publicMethods);
                  _modules.push(name);
                };
                var _getLoopedId = function _getLoopedId2(index) {
                  var numSlides = _getNumItems();
                  if (index > numSlides - 1) {
                    return index - numSlides;
                  } else if (index < 0) {
                    return numSlides + index;
                  }
                  return index;
                };
                var _listeners = {};
                var _listen = function _listen2(name, fn) {
                  if (!_listeners[name]) {
                    _listeners[name] = [];
                  }
                  return _listeners[name].push(fn);
                };
                var _shout = function _shout2(name) {
                  var listeners = _listeners[name];
                  if (listeners) {
                    var args = Array.prototype.slice.call(arguments);
                    args.shift();
                    for (var i = 0; i < listeners.length; i++) {
                      listeners[i].apply(self, args);
                    }
                  }
                };
                var _getCurrentTime = function _getCurrentTime2() {
                  return (/* @__PURE__ */ new Date()).getTime();
                };
                var _applyBgOpacity = function _applyBgOpacity2(opacity) {
                  _bgOpacity = opacity;
                  self.bg.style.opacity = opacity * _options.bgOpacity;
                };
                var _applyZoomTransform = function _applyZoomTransform2(styleObj, x, y, zoom, item) {
                  if (!_renderMaxResolution || item && item !== self.currItem) {
                    zoom = zoom / (item ? item.fitRatio : self.currItem.fitRatio);
                  }
                  styleObj[_transformKey] = _translatePrefix + x + "px, " + y + "px" + _translateSufix + " scale(" + zoom + ")";
                };
                var _applyCurrentZoomPan = function _applyCurrentZoomPan2(allowRenderResolution) {
                  if (_currZoomElementStyle) {
                    if (allowRenderResolution) {
                      if (_currZoomLevel > self.currItem.fitRatio) {
                        if (!_renderMaxResolution) {
                          _setImageSize(self.currItem, false, true);
                          _renderMaxResolution = true;
                        }
                      } else {
                        if (_renderMaxResolution) {
                          _setImageSize(self.currItem);
                          _renderMaxResolution = false;
                        }
                      }
                    }
                    _applyZoomTransform(_currZoomElementStyle, _panOffset.x, _panOffset.y, _currZoomLevel);
                  }
                };
                var _applyZoomPanToItem = function _applyZoomPanToItem2(item) {
                  if (item.container) {
                    _applyZoomTransform(item.container.style, item.initialPosition.x, item.initialPosition.y, item.initialZoomLevel, item);
                  }
                };
                var _setTranslateX = function _setTranslateX2(x, elStyle) {
                  elStyle[_transformKey] = _translatePrefix + x + "px, 0px" + _translateSufix;
                };
                var _moveMainScroll = function _moveMainScroll2(x, dragging) {
                  if (!_options.loop && dragging) {
                    var newSlideIndexOffset = _currentItemIndex + (_slideSize.x * _currPositionIndex - x) / _slideSize.x;
                    var _delta = Math.round(x - _mainScrollPos.x);
                    if (newSlideIndexOffset < 0 && _delta > 0 || newSlideIndexOffset >= _getNumItems() - 1 && _delta < 0) {
                      x = _mainScrollPos.x + _delta * _options.mainScrollEndFriction;
                    }
                  }
                  _mainScrollPos.x = x;
                  _setTranslateX(x, _containerStyle);
                };
                var _calculatePanOffset = function _calculatePanOffset2(axis, zoomLevel) {
                  var m = _midZoomPoint[axis] - _offset[axis];
                  return _startPanOffset[axis] + _currPanDist[axis] + m - m * (zoomLevel / _startZoomLevel);
                };
                var _equalizePoints = function _equalizePoints2(p1, p22) {
                  p1.x = p22.x;
                  p1.y = p22.y;
                  if (p22.id) {
                    p1.id = p22.id;
                  }
                };
                var _roundPoint = function _roundPoint2(p3) {
                  p3.x = Math.round(p3.x);
                  p3.y = Math.round(p3.y);
                };
                var _mouseMoveTimeout = null;
                var _onFirstMouseMove = function _onFirstMouseMove2() {
                  if (_mouseMoveTimeout) {
                    helper.unbind(document, "mousemove", _onFirstMouseMove2);
                    helper.addClass(template, "zvui-pinch--has_mouse");
                    _options.mouseUsed = true;
                    _shout("mouseUsed");
                  }
                  _mouseMoveTimeout = setTimeout(function() {
                    _mouseMoveTimeout = null;
                  }, 100);
                };
                var _bindEvents = function _bindEvents2() {
                  helper.bind(document, "keydown", self);
                  if (_features.transform) {
                    helper.bind(self.scrollWrap, "click", self);
                  }
                  if (!_options.mouseUsed) {
                    helper.bind(document, "mousemove", _onFirstMouseMove);
                  }
                  helper.bind(window, "resize scroll", self);
                  _shout("bindEvents");
                };
                var _unbindEvents = function _unbindEvents2() {
                  helper.unbind(window, "resize", self);
                  helper.unbind(window, "scroll", _globalEventHandlers.scroll);
                  helper.unbind(document, "keydown", self);
                  helper.unbind(document, "mousemove", _onFirstMouseMove);
                  if (_features.transform) {
                    helper.unbind(self.scrollWrap, "click", self);
                  }
                  if (_isDragging) {
                    helper.unbind(window, _upMoveEvents, self);
                  }
                  _shout("unbindEvents");
                };
                var _calculatePanBounds = function _calculatePanBounds2(zoomLevel, update) {
                  var bounds = _calculateItemSize(self.currItem, _viewportSize, zoomLevel);
                  if (update) {
                    _currPanBounds = bounds;
                  }
                  return bounds;
                };
                var _getMinZoomLevel = function _getMinZoomLevel2(item) {
                  if (!item) {
                    item = self.currItem;
                  }
                  return item.initialZoomLevel;
                };
                var _getMaxZoomLevel = function _getMaxZoomLevel2(item) {
                  if (!item) {
                    item = self.currItem;
                  }
                  return item.w > 0 ? _options.maxSpreadZoom : 1;
                };
                var _modifyDestPanOffset = function _modifyDestPanOffset2(axis, destPanBounds, destPanOffset, destZoomLevel) {
                  if (destZoomLevel === self.currItem.initialZoomLevel) {
                    destPanOffset[axis] = self.currItem.initialPosition[axis];
                    return true;
                  } else {
                    destPanOffset[axis] = _calculatePanOffset(axis, destZoomLevel);
                    if (destPanOffset[axis] > destPanBounds.min[axis]) {
                      destPanOffset[axis] = destPanBounds.min[axis];
                      return true;
                    } else if (destPanOffset[axis] < destPanBounds.max[axis]) {
                      destPanOffset[axis] = destPanBounds.max[axis];
                      return true;
                    }
                  }
                  return false;
                };
                var _setupTransforms = function _setupTransforms2() {
                  if (_transformKey) {
                    var allow3dTransform = _features.perspective && !_likelyTouchDevice;
                    _translatePrefix = "translate" + (allow3dTransform ? "3d(" : "(");
                    _translateSufix = _features.perspective ? ", 0px)" : ")";
                    return;
                  }
                  _transformKey = "left";
                  helper.addClass(template, "zvui-pinch--ie");
                  _setTranslateX = function _setTranslateX2(x, elStyle) {
                    elStyle.left = x + "px";
                  };
                  _applyZoomPanToItem = function _applyZoomPanToItem2(item) {
                    var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio;
                    var s = item.container.style;
                    var w = zoomRatio * item.w;
                    var h = zoomRatio * item.h;
                    s.width = w + "px";
                    s.height = h + "px";
                    s.left = item.initialPosition.x + "px";
                    s.top = item.initialPosition.y + "px";
                  };
                  _applyCurrentZoomPan = function _applyCurrentZoomPan2() {
                    if (_currZoomElementStyle) {
                      var s = _currZoomElementStyle;
                      var item = self.currItem;
                      var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio;
                      var w = zoomRatio * item.w;
                      var h = zoomRatio * item.h;
                      s.width = w + "px";
                      s.height = h + "px";
                      s.left = _panOffset.x + "px";
                      s.top = _panOffset.y + "px";
                    }
                  };
                };
                var _onKeyDown = function _onKeyDown2(e) {
                  var keydownAction = "";
                  if (_options.escKey && e.keyCode === 27) {
                    keydownAction = "close";
                  } else if (_options.arrowKeys) {
                    if (e.keyCode === 37) {
                      keydownAction = "prev";
                    } else if (e.keyCode === 39) {
                      keydownAction = "next";
                    }
                  }
                  if (keydownAction) {
                    if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {
                      if (e.preventDefault) {
                        e.preventDefault();
                      } else {
                        e.returnValue = false;
                      }
                      self[keydownAction]();
                    }
                  }
                };
                var _onGlobalClick = function _onGlobalClick2(e) {
                  if (!e) {
                    return;
                  }
                  if (_moved || _zoomStarted || _mainScrollAnimating || _verticalDragInitiated) {
                    e.preventDefault();
                    e.stopPropagation();
                  }
                };
                var _updatePageScrollOffset = function _updatePageScrollOffset2() {
                  self.setScrollOffset(0, helper.getScrollY());
                };
                var _animations = {};
                var _numAnimations = 0;
                var _stopAnimation = function _stopAnimation2(name) {
                  if (_animations[name]) {
                    if (_animations[name].raf) {
                      _cancelAF(_animations[name].raf);
                    }
                    _numAnimations--;
                    delete _animations[name];
                  }
                };
                var _registerStartAnimation = function _registerStartAnimation2(name) {
                  if (_animations[name]) {
                    _stopAnimation(name);
                  }
                  if (!_animations[name]) {
                    _numAnimations++;
                    _animations[name] = {};
                  }
                };
                var _stopAllAnimations = function _stopAllAnimations2() {
                  for (var prop in _animations) {
                    if (_animations.hasOwnProperty(prop)) {
                      _stopAnimation(prop);
                    }
                  }
                };
                var _animateProp = function _animateProp2(name, b, endProp, d, easingFn, onUpdate, onComplete) {
                  var startAnimTime = _getCurrentTime();
                  var t = void 0;
                  _registerStartAnimation(name);
                  var animloop = function animloop2() {
                    if (_animations[name]) {
                      t = _getCurrentTime() - startAnimTime;
                      if (t >= d) {
                        _stopAnimation(name);
                        onUpdate(endProp);
                        if (onComplete) {
                          onComplete();
                        }
                        return;
                      }
                      onUpdate((endProp - b) * easingFn(t / d) + b);
                      _animations[name].raf = _requestAF(animloop2);
                    }
                  };
                  animloop();
                };
                var publicMethods = {
                  // make a few local variables and functions public
                  shout: _shout,
                  listen: _listen,
                  viewportSize: _viewportSize,
                  options: _options,
                  isMainScrollAnimating: function isMainScrollAnimating() {
                    return _mainScrollAnimating;
                  },
                  getZoomLevel: function getZoomLevel() {
                    return _currZoomLevel;
                  },
                  getCurrentIndex: function getCurrentIndex() {
                    return _currentItemIndex;
                  },
                  isDragging: function isDragging() {
                    return _isDragging;
                  },
                  isZooming: function isZooming() {
                    return _isZooming;
                  },
                  setScrollOffset: function setScrollOffset(x, y) {
                    _offset.x = x;
                    _currentWindowScrollY = _offset.y = y;
                    _shout("updateScrollOffset", _offset);
                  },
                  applyZoomPan: function applyZoomPan(zoomLevel, panX, panY, allowRenderResolution) {
                    _panOffset.x = panX;
                    _panOffset.y = panY;
                    _currZoomLevel = zoomLevel;
                    _applyCurrentZoomPan(allowRenderResolution);
                  },
                  init: function init() {
                    if (_isOpen || _isDestroying) {
                      return;
                    }
                    var i = void 0;
                    self.helper = helper;
                    self.template = template;
                    self.bg = helper.getChildByClass(template, "zvui-pinch__bg");
                    _initalClassName = template.className;
                    _isOpen = true;
                    _features = helper.detectFeatures();
                    _requestAF = _features.raf;
                    _cancelAF = _features.caf;
                    _transformKey = _features.transform;
                    _oldIE = _features.oldIE;
                    self.scrollWrap = helper.getChildByClass(template, "zvui-pinch__scroll-wrap");
                    self.container = helper.getChildByClass(self.scrollWrap, "zvui-pinch__container");
                    _containerStyle = self.container.style;
                    self.itemHolders = _itemHolders = [{
                      el: self.container.children[0],
                      wrap: 0,
                      index: -1
                    }, {
                      el: self.container.children[1],
                      wrap: 0,
                      index: -1
                    }, {
                      el: self.container.children[2],
                      wrap: 0,
                      index: -1
                    }];
                    _itemHolders[0].el.style.display = _itemHolders[2].el.style.display = "none";
                    _setupTransforms();
                    _globalEventHandlers = {
                      resize: self.updateSize,
                      scroll: _updatePageScrollOffset,
                      keydown: _onKeyDown,
                      click: _onGlobalClick
                    };
                    var oldPhone = _features.isOldIOSPhone || _features.isOldAndroid || _features.isMobileOpera;
                    if (!_features.animationName || !_features.transform || oldPhone) {
                      _options.showAnimationDuration = _options.hideAnimationDuration = 0;
                    }
                    for (i = 0; i < _modules.length; i++) {
                      self["init" + _modules[i]]();
                    }
                    if (UiClass) {
                      var ui = self.ui = new UiClass(self, helper);
                      ui.init();
                    }
                    _shout("firstUpdate");
                    _currentItemIndex = _currentItemIndex || _options.index || 0;
                    if (isNaN(_currentItemIndex) || _currentItemIndex < 0 || _currentItemIndex >= _getNumItems()) {
                      _currentItemIndex = 0;
                    }
                    self.currItem = _getItemAt(_currentItemIndex);
                    if (_features.isOldIOSPhone || _features.isOldAndroid) {
                      _isFixedPosition = false;
                    }
                    template.setAttribute("aria-hidden", "false");
                    if (_options.modal) {
                      if (!_isFixedPosition) {
                        template.style.position = "absolute";
                        template.style.top = helper.getScrollY() + "px";
                      } else {
                        template.style.position = "fixed";
                      }
                    }
                    if (_currentWindowScrollY === void 0) {
                      _shout("initialLayout");
                      _currentWindowScrollY = _initalWindowScrollY = helper.getScrollY();
                    }
                    var rootClasses = "zvui-pinch--open ";
                    if (_options.mainClass) {
                      rootClasses += _options.mainClass + " ";
                    }
                    if (_options.showHideOpacity) {
                      rootClasses += "zvui-pinch--animate_opacity ";
                    }
                    rootClasses += _likelyTouchDevice ? "zvui-pinch--touch" : "zvui-pinch--notouch";
                    rootClasses += _features.animationName ? " zvui-pinch--css_animation" : "";
                    rootClasses += _features.svg ? " zvui-pinch--svg" : "";
                    helper.addClass(template, rootClasses);
                    self.updateSize();
                    _containerShiftIndex = -1;
                    _indexDiff = null;
                    for (i = 0; i < NUM_HOLDERS; i++) {
                      _setTranslateX((i + _containerShiftIndex) * _slideSize.x, _itemHolders[i].el.style);
                    }
                    if (!_oldIE) {
                      helper.bind(self.scrollWrap, _downEvents, self);
                    }
                    _listen("initialZoomInEnd", function() {
                      self.setContent(_itemHolders[0], _currentItemIndex - 1);
                      self.setContent(_itemHolders[2], _currentItemIndex + 1);
                      _itemHolders[0].el.style.display = _itemHolders[2].el.style.display = "block";
                      if (_options.focus) {
                        template.focus();
                      }
                      _bindEvents();
                    });
                    self.setContent(_itemHolders[1], _currentItemIndex);
                    self.updateCurrItem();
                    _shout("afterInit");
                    if (!_isFixedPosition) {
                      _updateSizeInterval = setInterval(function() {
                        if (!_numAnimations && !_isDragging && !_isZooming && _currZoomLevel === self.currItem.initialZoomLevel) {
                          self.updateSize();
                        }
                      }, 1e3);
                    }
                    helper.addClass(template, "zvui-pinch--visible");
                  },
                  // Close the gallery, then destroy it
                  close: function close() {
                    if (!_isOpen) {
                      return;
                    }
                    _isOpen = false;
                    _isDestroying = true;
                    _shout("close");
                    _unbindEvents();
                    _showOrHide(self.currItem, null, true, self.destroy);
                  },
                  // destroys the gallery (unbinds events, cleans up intervals and timeouts to avoid memory leaks)
                  destroy: function destroy() {
                    _shout("destroy");
                    if (_showOrHideTimeout) {
                      clearTimeout(_showOrHideTimeout);
                    }
                    template.setAttribute("aria-hidden", "true");
                    template.className = _initalClassName;
                    if (_updateSizeInterval) {
                      clearInterval(_updateSizeInterval);
                    }
                    helper.unbind(self.scrollWrap, _downEvents, self);
                    helper.unbind(window, "scroll", self);
                    _stopDragUpdateLoop();
                    _stopAllAnimations();
                    _listeners = null;
                  },
                  /**
                   * Pan image to position
                   * @param {Number} x
                   * @param {Number} y
                   * @param {Boolean} force Will ignore bounds if set to true.
                   */
                  panTo: function panTo(x, y, force) {
                    if (!force) {
                      if (x > _currPanBounds.min.x) {
                        x = _currPanBounds.min.x;
                      } else if (x < _currPanBounds.max.x) {
                        x = _currPanBounds.max.x;
                      }
                      if (y > _currPanBounds.min.y) {
                        y = _currPanBounds.min.y;
                      } else if (y < _currPanBounds.max.y) {
                        y = _currPanBounds.max.y;
                      }
                    }
                    _panOffset.x = x;
                    _panOffset.y = y;
                    _applyCurrentZoomPan();
                  },
                  handleEvent: function handleEvent() {
                    var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.event;
                    if (_globalEventHandlers[e.type]) {
                      _globalEventHandlers[e.type](e);
                    }
                  },
                  goTo: function goTo(index) {
                    index = _getLoopedId(index);
                    var diff = index - _currentItemIndex;
                    _indexDiff = diff;
                    _currentItemIndex = index;
                    self.currItem = _getItemAt(_currentItemIndex);
                    _currPositionIndex -= diff;
                    _moveMainScroll(_slideSize.x * _currPositionIndex);
                    _stopAllAnimations();
                    _mainScrollAnimating = false;
                    self.updateCurrItem();
                  },
                  next: function next() {
                    self.goTo(_currentItemIndex + 1);
                  },
                  prev: function prev() {
                    self.goTo(_currentItemIndex - 1);
                  },
                  // update current zoom/pan objects
                  updateCurrZoomItem: function updateCurrZoomItem(emulateSetContent) {
                    if (emulateSetContent) {
                      _shout("beforeChange", 0);
                    }
                    if (_itemHolders[1].el.children.length) {
                      var zoomElement = _itemHolders[1].el.children[0];
                      if (helper.hasClass(zoomElement, "zvui-pinch__zoom-wrap")) {
                        _currZoomElementStyle = zoomElement.style;
                      } else {
                        _currZoomElementStyle = null;
                      }
                    } else {
                      _currZoomElementStyle = null;
                    }
                    _currPanBounds = self.currItem.bounds;
                    _startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;
                    _panOffset.x = _currPanBounds.center.x;
                    _panOffset.y = _currPanBounds.center.y;
                    if (emulateSetContent) {
                      _shout("afterChange");
                    }
                  },
                  invalidateCurrItems: function invalidateCurrItems() {
                    _itemsNeedUpdate = true;
                    for (var i = 0; i < NUM_HOLDERS; i++) {
                      if (_itemHolders[i].item) {
                        _itemHolders[i].item.needsUpdate = true;
                      }
                    }
                  },
                  updateCurrItem: function updateCurrItem(beforeAnimation) {
                    if (_indexDiff === 0) {
                      return;
                    }
                    var diffAbs = Math.abs(_indexDiff);
                    var tempHolder = void 0;
                    if (beforeAnimation && diffAbs < 2) {
                      return;
                    }
                    self.currItem = _getItemAt(_currentItemIndex);
                    _renderMaxResolution = false;
                    _shout("beforeChange", _indexDiff);
                    if (diffAbs >= NUM_HOLDERS) {
                      _containerShiftIndex += _indexDiff + (_indexDiff > 0 ? -NUM_HOLDERS : NUM_HOLDERS);
                      diffAbs = NUM_HOLDERS;
                    }
                    for (var i = 0; i < diffAbs; i++) {
                      if (_indexDiff > 0) {
                        tempHolder = _itemHolders.shift();
                        _itemHolders[NUM_HOLDERS - 1] = tempHolder;
                        _containerShiftIndex++;
                        _setTranslateX((_containerShiftIndex + 2) * _slideSize.x, tempHolder.el.style);
                        self.setContent(tempHolder, _currentItemIndex - diffAbs + i + 1 + 1);
                      } else {
                        tempHolder = _itemHolders.pop();
                        _itemHolders.unshift(tempHolder);
                        _containerShiftIndex--;
                        _setTranslateX(_containerShiftIndex * _slideSize.x, tempHolder.el.style);
                        self.setContent(tempHolder, _currentItemIndex + diffAbs - i - 1 - 1);
                      }
                    }
                    if (_currZoomElementStyle && Math.abs(_indexDiff) === 1) {
                      var prevItem = _getItemAt(_prevItemIndex);
                      if (prevItem.initialZoomLevel !== _currZoomLevel) {
                        _calculateItemSize(prevItem, _viewportSize);
                        _setImageSize(prevItem);
                        _applyZoomPanToItem(prevItem);
                      }
                    }
                    _indexDiff = 0;
                    self.updateCurrZoomItem();
                    _prevItemIndex = _currentItemIndex;
                    _shout("afterChange");
                  },
                  updateSize: function updateSize(force) {
                    if (!_isFixedPosition && _options.modal) {
                      var windowScrollY = helper.getScrollY();
                      if (_currentWindowScrollY !== windowScrollY) {
                        template.style.top = windowScrollY + "px";
                        _currentWindowScrollY = windowScrollY;
                      }
                      if (!force && _windowVisibleSize.x === window.innerWidth && _windowVisibleSize.y === window.innerHeight) {
                        return;
                      }
                      _windowVisibleSize.x = window.innerWidth;
                      _windowVisibleSize.y = window.innerHeight;
                      template.style.height = _windowVisibleSize.y + "px";
                    }
                    _viewportSize.x = self.scrollWrap.clientWidth;
                    _viewportSize.y = self.scrollWrap.clientHeight;
                    _updatePageScrollOffset();
                    _slideSize.x = _viewportSize.x + Math.round(_viewportSize.x * _options.spacing);
                    _slideSize.y = _viewportSize.y;
                    _moveMainScroll(_slideSize.x * _currPositionIndex);
                    _shout("beforeResize");
                    if (_containerShiftIndex !== void 0) {
                      var holder = void 0;
                      var item = void 0;
                      var hIndex = void 0;
                      for (var i = 0; i < NUM_HOLDERS; i++) {
                        holder = _itemHolders[i];
                        _setTranslateX((i + _containerShiftIndex) * _slideSize.x, holder.el.style);
                        hIndex = _currentItemIndex + i - 1;
                        if (_options.loop && _getNumItems() > 2) {
                          hIndex = _getLoopedId(hIndex);
                        }
                        item = _getItemAt(hIndex);
                        if (item && (_itemsNeedUpdate || item.needsUpdate || !item.bounds)) {
                          self.cleanSlide(item);
                          self.setContent(holder, hIndex);
                          if (i === 1) {
                            self.currItem = item;
                            self.updateCurrZoomItem(true);
                          }
                          item.needsUpdate = false;
                        } else if (holder.index === -1 && hIndex >= 0) {
                          self.setContent(holder, hIndex);
                        }
                        if (item && item.container) {
                          _calculateItemSize(item, _viewportSize);
                          _setImageSize(item);
                          _applyZoomPanToItem(item);
                        }
                      }
                      _itemsNeedUpdate = false;
                    }
                    _startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;
                    _currPanBounds = self.currItem.bounds;
                    if (_currPanBounds) {
                      _panOffset.x = _currPanBounds.center.x;
                      _panOffset.y = _currPanBounds.center.y;
                      _applyCurrentZoomPan(true);
                    }
                    _shout("resize");
                  },
                  // Zoom current item to
                  zoomTo: function zoomTo(destZoomLevel, centerPoint, speed, easingFn, updateFn) {
                    if (centerPoint) {
                      _startZoomLevel = _currZoomLevel;
                      _midZoomPoint.x = Math.abs(centerPoint.x) - _panOffset.x;
                      _midZoomPoint.y = Math.abs(centerPoint.y) - _panOffset.y;
                      _equalizePoints(_startPanOffset, _panOffset);
                    }
                    var destPanBounds = _calculatePanBounds(destZoomLevel, false);
                    var destPanOffset = {};
                    _modifyDestPanOffset("x", destPanBounds, destPanOffset, destZoomLevel);
                    _modifyDestPanOffset("y", destPanBounds, destPanOffset, destZoomLevel);
                    var initialZoomLevel = _currZoomLevel;
                    var initialPanOffset = {
                      x: _panOffset.x,
                      y: _panOffset.y
                    };
                    _roundPoint(destPanOffset);
                    var onUpdate = function onUpdate2(now) {
                      if (now === 1) {
                        _currZoomLevel = destZoomLevel;
                        _panOffset.x = destPanOffset.x;
                        _panOffset.y = destPanOffset.y;
                      } else {
                        _currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
                        _panOffset.x = (destPanOffset.x - initialPanOffset.x) * now + initialPanOffset.x;
                        _panOffset.y = (destPanOffset.y - initialPanOffset.y) * now + initialPanOffset.y;
                      }
                      if (updateFn) {
                        updateFn(now);
                      }
                      _applyCurrentZoomPan(now === 1);
                    };
                    if (speed) {
                      _animateProp("customZoomTo", 0, 1, speed, easingFn || helper.easing.sine.inOut, onUpdate);
                    } else {
                      onUpdate(1);
                    }
                  }
                };
                var MIN_SWIPE_DISTANCE = 30;
                var DIRECTION_CHECK_OFFSET = 10;
                var _gestureStartTime = void 0;
                var _gestureCheckSpeedTime = void 0;
                var p = {};
                var p2 = {};
                var delta = {};
                var _currPoint = {};
                var _startPoint = {};
                var _currPointers = [];
                var _startMainScrollPos = {};
                var _releaseAnimData = void 0;
                var _posPoints = [];
                var _tempPoint = {};
                var _isZoomingIn = void 0;
                var _verticalDragInitiated = void 0;
                var _oldAndroidTouchEndTimeout = void 0;
                var _currZoomedItemIndex = 0;
                var _centerPoint = _getEmptyPoint();
                var _lastReleaseTime = 0;
                var _isDragging = void 0;
                var _isMultitouch = void 0;
                var _zoomStarted = void 0;
                var _moved = void 0;
                var _dragAnimFrame = void 0;
                var _mainScrollShifted = void 0;
                var _currentPoints = void 0;
                var _isZooming = void 0;
                var _currPointsDistance = void 0;
                var _startPointsDistance = void 0;
                var _currPanBounds = void 0;
                var _mainScrollPos = _getEmptyPoint();
                var _currZoomElementStyle = void 0;
                var _mainScrollAnimating = void 0;
                var _midZoomPoint = _getEmptyPoint();
                var _currCenterPoint = _getEmptyPoint();
                var _direction = void 0;
                var _isFirstMove = void 0;
                var _opacityChanged = void 0;
                var _bgOpacity = void 0;
                var _wasOverInitialZoom = void 0;
                var _isEqualPoints = function _isEqualPoints2(p1, p22) {
                  return p1.x === p22.x && p1.y === p22.y;
                };
                var _isNearbyPoints = function _isNearbyPoints2(touch0, touch1) {
                  return Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;
                };
                var _calculatePointsDistance = function _calculatePointsDistance2(p1, p22) {
                  _tempPoint.x = Math.abs(p1.x - p22.x);
                  _tempPoint.y = Math.abs(p1.y - p22.y);
                  return Math.sqrt(_tempPoint.x * _tempPoint.x + _tempPoint.y * _tempPoint.y);
                };
                var _stopDragUpdateLoop = function _stopDragUpdateLoop2() {
                  if (_dragAnimFrame) {
                    _cancelAF(_dragAnimFrame);
                    _dragAnimFrame = null;
                  }
                };
                var _dragUpdateLoop = function _dragUpdateLoop2() {
                  if (_isDragging) {
                    _dragAnimFrame = _requestAF(_dragUpdateLoop2);
                    _renderMovement();
                  }
                };
                var _canPan = function _canPan2() {
                  return !(_options.scaleMode === "fit" && _currZoomLevel === self.currItem.initialZoomLevel);
                };
                var _closestElement = function _closestElement2(el, fn) {
                  if (!el || el === document) {
                    return false;
                  }
                  if (el.getAttribute("class") && el.getAttribute("class").includes("zvui-pinch__scroll-wrap")) {
                    return false;
                  }
                  if (fn(el)) {
                    return el;
                  }
                  return _closestElement2(el.parentNode, fn);
                };
                var _preventObj = {};
                var _preventDefaultEventBehaviour = function _preventDefaultEventBehaviour2(e, isDown) {
                  _preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);
                  _shout("preventDragEvent", e, isDown, _preventObj);
                  return _preventObj.prevent;
                };
                var _convertTouchToPoint = function _convertTouchToPoint2(touch, p3) {
                  p3.x = touch.pageX;
                  p3.y = touch.pageY;
                  p3.id = touch.identifier;
                  return p3;
                };
                var _findCenterOfPoints = function _findCenterOfPoints2(p1, p22, pCenter) {
                  pCenter.x = (p1.x + p22.x) * 0.5;
                  pCenter.y = (p1.y + p22.y) * 0.5;
                };
                var _pushPosPoint = function _pushPosPoint2(time, x, y) {
                  if (time - _gestureCheckSpeedTime > 50) {
                    var o = _posPoints.length > 2 ? _posPoints.shift() : {};
                    o.x = x;
                    o.y = y;
                    _posPoints.push(o);
                    _gestureCheckSpeedTime = time;
                  }
                };
                var _calculateVerticalDragOpacityRatio = function _calculateVerticalDragOpacityRatio2() {
                  var yOffset = _panOffset.y - self.currItem.initialPosition.y;
                  return 1 - Math.abs(yOffset / (_viewportSize.y / 2));
                };
                var _ePoint1 = {};
                var _ePoint2 = {};
                var _tempPointsArr = [];
                var _tempCounter = void 0;
                var _getTouchPoints = function _getTouchPoints2(e) {
                  while (_tempPointsArr.length > 0) {
                    _tempPointsArr.pop();
                  }
                  if (!_pointerEventEnabled) {
                    if (e.type.includes("touch")) {
                      if (e.touches && e.touches.length > 0) {
                        _tempPointsArr[0] = _convertTouchToPoint(e.touches[0], _ePoint1);
                        if (e.touches.length > 1) {
                          _tempPointsArr[1] = _convertTouchToPoint(e.touches[1], _ePoint2);
                        }
                      }
                    } else {
                      _ePoint1.x = e.pageX;
                      _ePoint1.y = e.pageY;
                      _ePoint1.id = "";
                      _tempPointsArr[0] = _ePoint1;
                    }
                  } else {
                    _tempCounter = 0;
                    _currPointers.forEach(function(p3) {
                      if (_tempCounter === 0) {
                        _tempPointsArr[0] = p3;
                      } else if (_tempCounter === 1) {
                        _tempPointsArr[1] = p3;
                      }
                      _tempCounter++;
                    });
                  }
                  return _tempPointsArr;
                };
                var _panOrMoveMainScroll = function _panOrMoveMainScroll2(axis, delta2) {
                  var panFriction = void 0;
                  var overDiff = 0;
                  var newOffset = _panOffset[axis] + delta2[axis];
                  var startOverDiff = void 0;
                  var dir = delta2[axis] > 0;
                  var newMainScrollPosition = _mainScrollPos.x + delta2.x;
                  var mainScrollDiff = _mainScrollPos.x - _startMainScrollPos.x;
                  var newPanPos = void 0;
                  var newMainScrollPos = void 0;
                  if (newOffset > _currPanBounds.min[axis] || newOffset < _currPanBounds.max[axis]) {
                    panFriction = _options.panEndFriction;
                  } else {
                    panFriction = 1;
                  }
                  newOffset = _panOffset[axis] + delta2[axis] * panFriction;
                  if (_options.allowPanToNext || _currZoomLevel === self.currItem.initialZoomLevel) {
                    if (!_currZoomElementStyle) {
                      newMainScrollPos = newMainScrollPosition;
                    } else if (_direction === "h" && axis === "x" && !_zoomStarted) {
                      if (dir) {
                        if (newOffset > _currPanBounds.min[axis]) {
                          panFriction = _options.panEndFriction;
                          overDiff = _currPanBounds.min[axis] - newOffset;
                          startOverDiff = _currPanBounds.min[axis] - _startPanOffset[axis];
                        }
                        if ((startOverDiff <= 0 || mainScrollDiff < 0) && _getNumItems() > 1) {
                          newMainScrollPos = newMainScrollPosition;
                          if (mainScrollDiff < 0 && newMainScrollPosition > _startMainScrollPos.x) {
                            newMainScrollPos = _startMainScrollPos.x;
                          }
                        } else {
                          if (_currPanBounds.min.x !== _currPanBounds.max.x) {
                            newPanPos = newOffset;
                          }
                        }
                      } else {
                        if (newOffset < _currPanBounds.max[axis]) {
                          panFriction = _options.panEndFriction;
                          overDiff = newOffset - _currPanBounds.max[axis];
                          startOverDiff = _startPanOffset[axis] - _currPanBounds.max[axis];
                        }
                        if ((startOverDiff <= 0 || mainScrollDiff > 0) && _getNumItems() > 1) {
                          newMainScrollPos = newMainScrollPosition;
                          if (mainScrollDiff > 0 && newMainScrollPosition < _startMainScrollPos.x) {
                            newMainScrollPos = _startMainScrollPos.x;
                          }
                        } else {
                          if (_currPanBounds.min.x !== _currPanBounds.max.x) {
                            newPanPos = newOffset;
                          }
                        }
                      }
                    }
                    if (axis === "x") {
                      if (newMainScrollPos !== void 0) {
                        _moveMainScroll(newMainScrollPos, true);
                        if (newMainScrollPos === _startMainScrollPos.x) {
                          _mainScrollShifted = false;
                        } else {
                          _mainScrollShifted = true;
                        }
                      }
                      if (_currPanBounds.min.x !== _currPanBounds.max.x) {
                        if (newPanPos !== void 0) {
                          _panOffset.x = newPanPos;
                        } else if (!_mainScrollShifted) {
                          _panOffset.x += delta2.x * panFriction;
                        }
                      }
                      return newMainScrollPos !== void 0;
                    }
                  }
                  if (!_mainScrollAnimating) {
                    if (!_mainScrollShifted) {
                      if (_currZoomLevel > self.currItem.fitRatio) {
                        _panOffset[axis] += delta2[axis] * panFriction;
                      }
                    }
                  }
                };
                var _onDragStart = function _onDragStart2(e) {
                  if (e.type === "mousedown" && e.button > 0) {
                    return;
                  }
                  if (_initialZoomRunning) {
                    e.preventDefault();
                    return;
                  }
                  if (_oldAndroidTouchEndTimeout && e.type === "mousedown") {
                    return;
                  }
                  if (_preventDefaultEventBehaviour(e, true)) {
                    e.preventDefault();
                  }
                  _shout("pointerDown");
                  if (_pointerEventEnabled) {
                    var pointerIndex = helper.arraySearch(_currPointers, e.pointerId, "id");
                    if (pointerIndex < 0) {
                      pointerIndex = _currPointers.length;
                    }
                    _currPointers[pointerIndex] = {
                      x: e.pageX,
                      y: e.pageY,
                      id: e.pointerId
                    };
                  }
                  var startPointsList = _getTouchPoints(e);
                  var numPoints = startPointsList.length;
                  _currentPoints = null;
                  _stopAllAnimations();
                  if (!_isDragging || numPoints === 1) {
                    _isDragging = _isFirstMove = true;
                    helper.bind(window, _upMoveEvents, self);
                    _isZoomingIn = _wasOverInitialZoom = _opacityChanged = _verticalDragInitiated = _mainScrollShifted = _moved = _isMultitouch = _zoomStarted = false;
                    _direction = null;
                    _shout("firstTouchStart", startPointsList);
                    _equalizePoints(_startPanOffset, _panOffset);
                    _currPanDist.x = _currPanDist.y = 0;
                    _equalizePoints(_currPoint, startPointsList[0]);
                    _equalizePoints(_startPoint, _currPoint);
                    _startMainScrollPos.x = _slideSize.x * _currPositionIndex;
                    _posPoints = [{
                      x: _currPoint.x,
                      y: _currPoint.y
                    }];
                    _gestureCheckSpeedTime = _gestureStartTime = _getCurrentTime();
                    _calculatePanBounds(_currZoomLevel, true);
                    _stopDragUpdateLoop();
                    _dragUpdateLoop();
                  }
                  if (!_isZooming && numPoints > 1 && !_mainScrollAnimating && !_mainScrollShifted) {
                    _startZoomLevel = _currZoomLevel;
                    _zoomStarted = false;
                    _isZooming = _isMultitouch = true;
                    _currPanDist.y = _currPanDist.x = 0;
                    _equalizePoints(_startPanOffset, _panOffset);
                    _equalizePoints(p, startPointsList[0]);
                    _equalizePoints(p2, startPointsList[1]);
                    _findCenterOfPoints(p, p2, _currCenterPoint);
                    _midZoomPoint.x = Math.abs(_currCenterPoint.x) - _panOffset.x;
                    _midZoomPoint.y = Math.abs(_currCenterPoint.y) - _panOffset.y;
                    _currPointsDistance = _startPointsDistance = _calculatePointsDistance(p, p2);
                  }
                };
                var _onDragMove = function _onDragMove2(e) {
                  if (_pointerEventEnabled) {
                    var pointerIndex = helper.arraySearch(_currPointers, e.pointerId, "id");
                    if (pointerIndex > -1) {
                      var _p = _currPointers[pointerIndex];
                      _p.x = e.pageX;
                      _p.y = e.pageY;
                    }
                  }
                  if (_isDragging) {
                    var touchesList = _getTouchPoints(e);
                    if (!_direction && !_moved && !_isZooming) {
                      if (_mainScrollPos.x !== _slideSize.x * _currPositionIndex) {
                        _direction = "h";
                      } else {
                        var diff = Math.abs(touchesList[0].x - _currPoint.x) - Math.abs(touchesList[0].y - _currPoint.y);
                        if (Math.abs(diff) >= DIRECTION_CHECK_OFFSET) {
                          _direction = diff > 0 ? "h" : "v";
                          _currentPoints = touchesList;
                        }
                      }
                    } else {
                      _currentPoints = touchesList;
                    }
                  }
                };
                var _renderMovement = function _renderMovement2() {
                  if (!_currentPoints) {
                    return;
                  }
                  var numPoints = _currentPoints.length;
                  if (numPoints === 0) {
                    return;
                  }
                  _equalizePoints(p, _currentPoints[0]);
                  delta.x = p.x - _currPoint.x;
                  delta.y = p.y - _currPoint.y;
                  if (_isZooming && numPoints > 1) {
                    _currPoint.x = p.x;
                    _currPoint.y = p.y;
                    if (!delta.x && !delta.y && _isEqualPoints(_currentPoints[1], p2)) {
                      return;
                    }
                    _equalizePoints(p2, _currentPoints[1]);
                    if (!_zoomStarted) {
                      _zoomStarted = true;
                      _shout("zoomGestureStarted");
                    }
                    var pointsDistance = _calculatePointsDistance(p, p2);
                    var zoomLevel = _calculateZoomLevel(pointsDistance);
                    if (zoomLevel > self.currItem.initialZoomLevel + self.currItem.initialZoomLevel / 15) {
                      _wasOverInitialZoom = true;
                    }
                    var zoomFriction = 1;
                    var minZoomLevel = _getMinZoomLevel();
                    var maxZoomLevel = _getMaxZoomLevel();
                    if (zoomLevel < minZoomLevel) {
                      if (_options.pinchToClose && !_wasOverInitialZoom && _startZoomLevel <= self.currItem.initialZoomLevel) {
                        var minusDiff = minZoomLevel - zoomLevel;
                        var percent = 1 - minusDiff / (minZoomLevel / 1.2);
                        _applyBgOpacity(percent);
                        _shout("onPinchClose", percent);
                        _opacityChanged = true;
                      } else {
                        zoomFriction = (minZoomLevel - zoomLevel) / minZoomLevel;
                        if (zoomFriction > 1) {
                          zoomFriction = 1;
                        }
                        zoomLevel = minZoomLevel - zoomFriction * (minZoomLevel / 3);
                      }
                    } else if (zoomLevel > maxZoomLevel) {
                      zoomFriction = (zoomLevel - maxZoomLevel) / (minZoomLevel * 6);
                      if (zoomFriction > 1) {
                        zoomFriction = 1;
                      }
                      zoomLevel = maxZoomLevel + zoomFriction * minZoomLevel;
                    }
                    if (zoomFriction < 0) {
                      zoomFriction = 0;
                    }
                    _currPointsDistance = pointsDistance;
                    _findCenterOfPoints(p, p2, _centerPoint);
                    _currPanDist.x += _centerPoint.x - _currCenterPoint.x;
                    _currPanDist.y += _centerPoint.y - _currCenterPoint.y;
                    _equalizePoints(_currCenterPoint, _centerPoint);
                    _panOffset.x = _calculatePanOffset("x", zoomLevel);
                    _panOffset.y = _calculatePanOffset("y", zoomLevel);
                    _isZoomingIn = zoomLevel > _currZoomLevel;
                    _currZoomLevel = zoomLevel;
                    _applyCurrentZoomPan();
                  } else {
                    if (!_direction) {
                      return;
                    }
                    if (_isFirstMove) {
                      _isFirstMove = false;
                      if (Math.abs(delta.x) >= DIRECTION_CHECK_OFFSET) {
                        delta.x -= _currentPoints[0].x - _startPoint.x;
                      }
                      if (Math.abs(delta.y) >= DIRECTION_CHECK_OFFSET) {
                        delta.y -= _currentPoints[0].y - _startPoint.y;
                      }
                    }
                    _currPoint.x = p.x;
                    _currPoint.y = p.y;
                    if (delta.x === 0 && delta.y === 0) {
                      return;
                    }
                    if (_direction === "v" && _options.closeOnVerticalDrag) {
                      if (!_canPan()) {
                        _currPanDist.y += delta.y;
                        _panOffset.y += delta.y;
                        var opacityRatio = _calculateVerticalDragOpacityRatio();
                        _verticalDragInitiated = true;
                        _shout("onVerticalDrag", opacityRatio);
                        _applyBgOpacity(opacityRatio);
                        _applyCurrentZoomPan();
                        return;
                      }
                    }
                    _pushPosPoint(_getCurrentTime(), p.x, p.y);
                    _moved = true;
                    _currPanBounds = self.currItem.bounds;
                    var mainScrollChanged = _panOrMoveMainScroll("x", delta);
                    if (!mainScrollChanged) {
                      _panOrMoveMainScroll("y", delta);
                      _roundPoint(_panOffset);
                      _applyCurrentZoomPan();
                    }
                  }
                };
                var _onDragRelease = function _onDragRelease2(e) {
                  if (_features.isOldAndroid) {
                    if (_oldAndroidTouchEndTimeout && e.type === "mouseup") {
                      return;
                    }
                    if (e.type.includes("touch")) {
                      clearTimeout(_oldAndroidTouchEndTimeout);
                      _oldAndroidTouchEndTimeout = setTimeout(function() {
                        _oldAndroidTouchEndTimeout = 0;
                      }, 600);
                    }
                  }
                  _shout("pointerUp");
                  if (_preventDefaultEventBehaviour(e, false)) {
                    e.preventDefault();
                  }
                  var releasePoint = void 0;
                  if (_pointerEventEnabled) {
                    var pointerIndex = helper.arraySearch(_currPointers, e.pointerId, "id");
                    if (pointerIndex > -1) {
                      releasePoint = _currPointers.splice(pointerIndex, 1)[0];
                      if (navigator.pointerEnabled) {
                        releasePoint.type = e.pointerType || "mouse";
                      } else {
                        var MSPOINTER_TYPES = {
                          4: "mouse",
                          // event.MSPOINTER_TYPE_MOUSE
                          2: "touch",
                          // event.MSPOINTER_TYPE_TOUCH
                          3: "pen"
                        };
                        releasePoint.type = MSPOINTER_TYPES[e.pointerType];
                        if (!releasePoint.type) {
                          releasePoint.type = e.pointerType || "mouse";
                        }
                      }
                    }
                  }
                  var touchList = _getTouchPoints(e);
                  var gestureType = void 0;
                  var numPoints = touchList.length;
                  if (e.type === "mouseup") {
                    numPoints = 0;
                  }
                  if (numPoints === 2) {
                    _currentPoints = null;
                    return true;
                  }
                  if (numPoints === 1) {
                    _equalizePoints(_startPoint, touchList[0]);
                  }
                  if (numPoints === 0 && !_direction && !_mainScrollAnimating) {
                    if (!releasePoint) {
                      if (e.type === "mouseup") {
                        releasePoint = {
                          x: e.pageX,
                          y: e.pageY,
                          type: "mouse"
                        };
                      } else if (e.changedTouches && e.changedTouches[0]) {
                        releasePoint = {
                          x: e.changedTouches[0].pageX,
                          y: e.changedTouches[0].pageY,
                          type: "touch"
                        };
                      }
                    }
                    _shout("touchRelease", e, releasePoint);
                  }
                  var releaseTimeDiff = -1;
                  if (numPoints === 0) {
                    _isDragging = false;
                    helper.unbind(window, _upMoveEvents, self);
                    _stopDragUpdateLoop();
                    if (_isZooming) {
                      releaseTimeDiff = 0;
                    } else if (_lastReleaseTime !== -1) {
                      releaseTimeDiff = _getCurrentTime() - _lastReleaseTime;
                    }
                  }
                  _lastReleaseTime = numPoints === 1 ? _getCurrentTime() : -1;
                  if (releaseTimeDiff !== -1 && releaseTimeDiff < 150) {
                    gestureType = "zoom";
                  } else {
                    gestureType = "swipe";
                  }
                  if (_isZooming && numPoints < 2) {
                    _isZooming = false;
                    if (numPoints === 1) {
                      gestureType = "zoomPointerUp";
                    }
                    _shout("zoomGestureEnded");
                  }
                  _currentPoints = null;
                  if (!_moved && !_zoomStarted && !_mainScrollAnimating && !_verticalDragInitiated) {
                    return;
                  }
                  _stopAllAnimations();
                  if (!_releaseAnimData) {
                    _releaseAnimData = _initDragReleaseAnimationData();
                  }
                  _releaseAnimData.calculateSwipeSpeed("x");
                  if (_verticalDragInitiated) {
                    var opacityRatio = _calculateVerticalDragOpacityRatio();
                    if (opacityRatio < _options.verticalDragRange) {
                      self.close();
                    } else {
                      (function() {
                        var initalPanY = _panOffset.y;
                        var initialBgOpacity = _bgOpacity;
                        _animateProp("verticalDrag", 0, 1, 300, helper.easing.cubic.out, function(now) {
                          _panOffset.y = (self.currItem.initialPosition.y - initalPanY) * now + initalPanY;
                          _applyBgOpacity((1 - initialBgOpacity) * now + initialBgOpacity);
                          _applyCurrentZoomPan();
                        });
                        _shout("onVerticalDrag", 1);
                      })();
                    }
                    return;
                  }
                  if ((_mainScrollShifted || _mainScrollAnimating) && numPoints === 0) {
                    var itemChanged = _finishSwipeMainScrollGesture(gestureType, _releaseAnimData);
                    if (itemChanged) {
                      return;
                    }
                    gestureType = "zoomPointerUp";
                  }
                  if (_mainScrollAnimating) {
                    return;
                  }
                  if (gestureType !== "swipe") {
                    _completeZoomGesture();
                    return;
                  }
                  if (!_mainScrollShifted && _currZoomLevel > self.currItem.fitRatio) {
                    _completePanGesture(_releaseAnimData);
                  }
                };
                var _initDragReleaseAnimationData = function _initDragReleaseAnimationData2() {
                  var lastFlickDuration = void 0;
                  var tempReleasePos = void 0;
                  var s = {
                    lastFlickOffset: {},
                    lastFlickDist: {},
                    lastFlickSpeed: {},
                    slowDownRatio: {},
                    slowDownRatioReverse: {},
                    speedDecelerationRatio: {},
                    speedDecelerationRatioAbs: {},
                    distanceOffset: {},
                    backAnimDestination: {},
                    backAnimStarted: {},
                    calculateSwipeSpeed: function calculateSwipeSpeed(axis) {
                      if (_posPoints.length > 1) {
                        lastFlickDuration = _getCurrentTime() - _gestureCheckSpeedTime + 50;
                        tempReleasePos = _posPoints[_posPoints.length - 2][axis];
                      } else {
                        lastFlickDuration = _getCurrentTime() - _gestureStartTime;
                        tempReleasePos = _startPoint[axis];
                      }
                      s.lastFlickOffset[axis] = _currPoint[axis] - tempReleasePos;
                      s.lastFlickDist[axis] = Math.abs(s.lastFlickOffset[axis]);
                      if (s.lastFlickDist[axis] > 20) {
                        s.lastFlickSpeed[axis] = s.lastFlickOffset[axis] / lastFlickDuration;
                      } else {
                        s.lastFlickSpeed[axis] = 0;
                      }
                      if (Math.abs(s.lastFlickSpeed[axis]) < 0.1) {
                        s.lastFlickSpeed[axis] = 0;
                      }
                      s.slowDownRatio[axis] = 0.95;
                      s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
                      s.speedDecelerationRatio[axis] = 1;
                    },
                    calculateOverBoundsAnimOffset: function calculateOverBoundsAnimOffset(axis, speed) {
                      if (!s.backAnimStarted[axis]) {
                        if (_panOffset[axis] > _currPanBounds.min[axis]) {
                          s.backAnimDestination[axis] = _currPanBounds.min[axis];
                        } else if (_panOffset[axis] < _currPanBounds.max[axis]) {
                          s.backAnimDestination[axis] = _currPanBounds.max[axis];
                        }
                        if (s.backAnimDestination[axis] !== void 0) {
                          s.slowDownRatio[axis] = 0.7;
                          s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
                          if (s.speedDecelerationRatioAbs[axis] < 0.05) {
                            s.lastFlickSpeed[axis] = 0;
                            s.backAnimStarted[axis] = true;
                            _animateProp("bounceZoomPan" + axis, _panOffset[axis], s.backAnimDestination[axis], speed || 300, helper.easing.sine.out, function(pos) {
                              _panOffset[axis] = pos;
                              _applyCurrentZoomPan();
                            });
                          }
                        }
                      }
                    },
                    // Reduces the speed by slowDownRatio (per 10ms)
                    calculateAnimOffset: function calculateAnimOffset(axis) {
                      if (!s.backAnimStarted[axis]) {
                        s.speedDecelerationRatio[axis] = s.speedDecelerationRatio[axis] * (s.slowDownRatio[axis] + s.slowDownRatioReverse[axis] - s.slowDownRatioReverse[axis] * s.timeDiff / 10);
                        s.speedDecelerationRatioAbs[axis] = Math.abs(s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis]);
                        s.distanceOffset[axis] = s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis] * s.timeDiff;
                        _panOffset[axis] += s.distanceOffset[axis];
                      }
                    },
                    panAnimLoop: function panAnimLoop() {
                      if (_animations.zoomPan) {
                        _animations.zoomPan.raf = _requestAF(s.panAnimLoop);
                        s.now = _getCurrentTime();
                        s.timeDiff = s.now - s.lastNow;
                        s.lastNow = s.now;
                        s.calculateAnimOffset("x");
                        s.calculateAnimOffset("y");
                        _applyCurrentZoomPan();
                        s.calculateOverBoundsAnimOffset("x");
                        s.calculateOverBoundsAnimOffset("y");
                        if (s.speedDecelerationRatioAbs.x < 0.05 && s.speedDecelerationRatioAbs.y < 0.05) {
                          _panOffset.x = Math.round(_panOffset.x);
                          _panOffset.y = Math.round(_panOffset.y);
                          _applyCurrentZoomPan();
                          _stopAnimation("zoomPan");
                          return;
                        }
                      }
                    }
                  };
                  return s;
                };
                var _completePanGesture = function _completePanGesture2(animData) {
                  animData.calculateSwipeSpeed("y");
                  _currPanBounds = self.currItem.bounds;
                  animData.backAnimDestination = {};
                  animData.backAnimStarted = {};
                  if (Math.abs(animData.lastFlickSpeed.x) <= 0.05 && Math.abs(animData.lastFlickSpeed.y) <= 0.05) {
                    animData.speedDecelerationRatioAbs.x = animData.speedDecelerationRatioAbs.y = 0;
                    animData.calculateOverBoundsAnimOffset("x");
                    animData.calculateOverBoundsAnimOffset("y");
                    return true;
                  }
                  _registerStartAnimation("zoomPan");
                  animData.lastNow = _getCurrentTime();
                  animData.panAnimLoop();
                };
                var _finishSwipeMainScrollGesture = function _finishSwipeMainScrollGesture2(gestureType, _releaseAnimData2) {
                  var itemChanged = void 0;
                  if (!_mainScrollAnimating) {
                    _currZoomedItemIndex = _currentItemIndex;
                  }
                  var itemsDiff = void 0;
                  if (gestureType === "swipe") {
                    var totalShiftDist = _currPoint.x - _startPoint.x;
                    var isFastLastFlick = _releaseAnimData2.lastFlickDist.x < 10;
                    if (totalShiftDist > MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData2.lastFlickOffset.x > 20)) {
                      itemsDiff = -1;
                    } else if (totalShiftDist < -MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData2.lastFlickOffset.x < -20)) {
                      itemsDiff = 1;
                    }
                  }
                  var nextCircle = void 0;
                  if (itemsDiff) {
                    _currentItemIndex += itemsDiff;
                    if (_currentItemIndex < 0) {
                      _currentItemIndex = _options.loop ? _getNumItems() - 1 : 0;
                      nextCircle = true;
                    } else if (_currentItemIndex >= _getNumItems()) {
                      _currentItemIndex = _options.loop ? 0 : _getNumItems() - 1;
                      nextCircle = true;
                    }
                    if (!nextCircle || _options.loop) {
                      _indexDiff += itemsDiff;
                      _currPositionIndex -= itemsDiff;
                      itemChanged = true;
                    }
                  }
                  var animateToX = _slideSize.x * _currPositionIndex;
                  var animateToDist = Math.abs(animateToX - _mainScrollPos.x);
                  var finishAnimDuration = void 0;
                  if (!itemChanged && animateToX > _mainScrollPos.x !== _releaseAnimData2.lastFlickSpeed.x > 0) {
                    finishAnimDuration = 333;
                  } else {
                    finishAnimDuration = Math.abs(_releaseAnimData2.lastFlickSpeed.x) > 0 ? animateToDist / Math.abs(_releaseAnimData2.lastFlickSpeed.x) : 333;
                    finishAnimDuration = Math.min(finishAnimDuration, 400);
                    finishAnimDuration = Math.max(finishAnimDuration, 250);
                  }
                  if (_currZoomedItemIndex === _currentItemIndex) {
                    itemChanged = false;
                  }
                  _mainScrollAnimating = true;
                  _shout("mainScrollAnimStart");
                  _animateProp("mainScroll", _mainScrollPos.x, animateToX, finishAnimDuration, helper.easing.cubic.out, _moveMainScroll, function() {
                    _stopAllAnimations();
                    _mainScrollAnimating = false;
                    _currZoomedItemIndex = -1;
                    if (itemChanged || _currZoomedItemIndex !== _currentItemIndex) {
                      self.updateCurrItem();
                    }
                    _shout("mainScrollAnimComplete");
                  });
                  if (itemChanged) {
                    self.updateCurrItem(true);
                  }
                  return itemChanged;
                };
                var _calculateZoomLevel = function _calculateZoomLevel2(touchesDistance) {
                  return 1 / _startPointsDistance * touchesDistance * _startZoomLevel;
                };
                var _completeZoomGesture = function _completeZoomGesture2() {
                  var destZoomLevel = _currZoomLevel;
                  var minZoomLevel = _getMinZoomLevel();
                  var maxZoomLevel = _getMaxZoomLevel();
                  if (_currZoomLevel < minZoomLevel) {
                    destZoomLevel = minZoomLevel;
                  } else if (_currZoomLevel > maxZoomLevel) {
                    destZoomLevel = maxZoomLevel;
                  }
                  var destOpacity = 1;
                  var onUpdate = void 0;
                  var initialOpacity = _bgOpacity;
                  if (_opacityChanged && !_isZoomingIn && !_wasOverInitialZoom && _currZoomLevel < minZoomLevel) {
                    self.close();
                    return true;
                  }
                  if (_opacityChanged) {
                    onUpdate = function onUpdate2(now) {
                      _applyBgOpacity((destOpacity - initialOpacity) * now + initialOpacity);
                    };
                  }
                  self.zoomTo(destZoomLevel, 0, 200, helper.easing.cubic.out, onUpdate);
                  return true;
                };
                _registerModule("Gestures", {
                  publicMethods: {
                    initGestures: function initGestures() {
                      var addEventNames = function addEventNames2(pref, down, move, up, cancel) {
                        _dragStartEvent = pref + down;
                        _dragMoveEvent = pref + move;
                        _dragEndEvent = pref + up;
                        if (cancel) {
                          _dragCancelEvent = pref + cancel;
                        } else {
                          _dragCancelEvent = "";
                        }
                      };
                      _pointerEventEnabled = _features.pointerEvent;
                      if (_pointerEventEnabled && _features.touch) {
                        _features.touch = false;
                      }
                      if (_pointerEventEnabled) {
                        if (navigator.pointerEnabled) {
                          addEventNames("pointer", "down", "move", "up", "cancel");
                        } else {
                          addEventNames("MSPointer", "Down", "Move", "Up", "Cancel");
                        }
                      } else if (_features.touch) {
                        addEventNames("touch", "start", "move", "end", "cancel");
                        _likelyTouchDevice = true;
                      } else {
                        addEventNames("mouse", "down", "move", "up");
                      }
                      _upMoveEvents = _dragMoveEvent + " " + _dragEndEvent + " " + _dragCancelEvent;
                      _downEvents = _dragStartEvent;
                      if (_pointerEventEnabled && !_likelyTouchDevice) {
                        _likelyTouchDevice = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1;
                      }
                      self.likelyTouchDevice = _likelyTouchDevice;
                      _globalEventHandlers[_dragStartEvent] = _onDragStart;
                      _globalEventHandlers[_dragMoveEvent] = _onDragMove;
                      _globalEventHandlers[_dragEndEvent] = _onDragRelease;
                      if (_dragCancelEvent) {
                        _globalEventHandlers[_dragCancelEvent] = _globalEventHandlers[_dragEndEvent];
                      }
                      if (_features.touch) {
                        _downEvents += " mousedown";
                        _upMoveEvents += " mousemove mouseup";
                        _globalEventHandlers.mousedown = _globalEventHandlers[_dragStartEvent];
                        _globalEventHandlers.mousemove = _globalEventHandlers[_dragMoveEvent];
                        _globalEventHandlers.mouseup = _globalEventHandlers[_dragEndEvent];
                      }
                      if (!_likelyTouchDevice) {
                        _options.allowPanToNext = false;
                      }
                    }
                  }
                });
                var _showOrHideTimeout = void 0;
                var _showOrHide = function _showOrHide2(item, img, out, completeFn) {
                  if (_showOrHideTimeout) {
                    clearTimeout(_showOrHideTimeout);
                  }
                  _initialZoomRunning = true;
                  _initialContentSet = true;
                  var thumbBounds = void 0;
                  if (item.initialLayout) {
                    thumbBounds = item.initialLayout;
                    item.initialLayout = null;
                  } else {
                    thumbBounds = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
                  }
                  var duration = out ? _options.hideAnimationDuration : _options.showAnimationDuration;
                  var onComplete = function onComplete2() {
                    _stopAnimation("initialZoom");
                    if (!out) {
                      _applyBgOpacity(1);
                      if (img) {
                        img.style.display = "block";
                      }
                      helper.addClass(template, "zvui-pinch__animated-in");
                      _shout("initialZoom" + (out ? "OutEnd" : "InEnd"));
                    } else {
                      self.template.removeAttribute("style");
                      self.bg.removeAttribute("style");
                    }
                    if (completeFn) {
                      completeFn();
                    }
                    _initialZoomRunning = false;
                  };
                  if (!duration || !thumbBounds || thumbBounds.x === void 0) {
                    _shout("initialZoom" + (out ? "Out" : "In"));
                    _currZoomLevel = item.initialZoomLevel;
                    _equalizePoints(_panOffset, item.initialPosition);
                    _applyCurrentZoomPan();
                    template.style.opacity = out ? 0 : 1;
                    _applyBgOpacity(1);
                    if (duration) {
                      setTimeout(function() {
                        onComplete();
                      }, duration);
                    } else {
                      onComplete();
                    }
                    return;
                  }
                  var startAnimation = function startAnimation2() {
                    var closeWithRaf = _closedByScroll;
                    var fadeEverything = !self.currItem.src || self.currItem.loadError || _options.showHideOpacity;
                    if (item.miniImg) {
                      item.miniImg.style.webkitBackfaceVisibility = "hidden";
                    }
                    if (!out) {
                      _currZoomLevel = thumbBounds.w / item.w;
                      _panOffset.x = thumbBounds.x;
                      _panOffset.y = thumbBounds.y - _initalWindowScrollY;
                      self[fadeEverything ? "template" : "bg"].style.opacity = 1e-3;
                      _applyCurrentZoomPan();
                    }
                    _registerStartAnimation("initialZoom");
                    if (out && !closeWithRaf) {
                      helper.removeClass(template, "zvui-pinch__animated-in");
                    }
                    if (fadeEverything) {
                      if (out) {
                        helper[(closeWithRaf ? "remove" : "add") + "Class"](template, "zvui-pinch__animate_opacity");
                      } else {
                        setTimeout(function() {
                          helper.addClass(template, "zvui-pinch__animate_opacity");
                        }, 30);
                      }
                    }
                    _showOrHideTimeout = setTimeout(function() {
                      _shout("initialZoom" + (out ? "Out" : "In"));
                      if (!out) {
                        _currZoomLevel = item.initialZoomLevel;
                        _equalizePoints(_panOffset, item.initialPosition);
                        _applyCurrentZoomPan();
                        _applyBgOpacity(1);
                        if (fadeEverything) {
                          template.style.opacity = 1;
                        } else {
                          _applyBgOpacity(1);
                        }
                        _showOrHideTimeout = setTimeout(onComplete, duration + 20);
                      } else {
                        (function() {
                          var destZoomLevel = thumbBounds.w / item.w;
                          var initialPanOffset = {
                            x: _panOffset.x,
                            y: _panOffset.y
                          };
                          var initialZoomLevel = _currZoomLevel;
                          var initalBgOpacity = _bgOpacity;
                          var onUpdate = function onUpdate2(now) {
                            if (now === 1) {
                              _currZoomLevel = destZoomLevel;
                              _panOffset.x = thumbBounds.x;
                              _panOffset.y = thumbBounds.y - _currentWindowScrollY;
                            } else {
                              _currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
                              _panOffset.x = (thumbBounds.x - initialPanOffset.x) * now + initialPanOffset.x;
                              _panOffset.y = (thumbBounds.y - _currentWindowScrollY - initialPanOffset.y) * now + initialPanOffset.y;
                            }
                            _applyCurrentZoomPan();
                            if (fadeEverything) {
                              template.style.opacity = 1 - now;
                            } else {
                              _applyBgOpacity(initalBgOpacity - now * initalBgOpacity);
                            }
                          };
                          if (closeWithRaf) {
                            _animateProp("initialZoom", 0, 1, duration, helper.easing.cubic.out, onUpdate, onComplete);
                          } else {
                            onUpdate(1);
                            _showOrHideTimeout = setTimeout(onComplete, duration + 20);
                          }
                        })();
                      }
                    }, out ? 25 : 90);
                  };
                  startAnimation();
                };
                var _items = void 0;
                var _tempPanAreaSize = {};
                var _imagesToAppendPool = [];
                var _initialContentSet = void 0;
                var _initialZoomRunning = void 0;
                var _controllerDefaultOptions = {
                  index: 0,
                  errorMsg: '<div class="zvui-pinch__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',
                  forceProgressiveLoading: false,
                  // TODO
                  preload: [1, 1],
                  getNumItemsFn: function getNumItemsFn() {
                    return _items.length;
                  }
                };
                var _getItemAt = void 0;
                var _getNumItems = void 0;
                var _initialIsLoop = void 0;
                var _getZeroBounds = function _getZeroBounds2() {
                  return {
                    center: {
                      x: 0,
                      y: 0
                    },
                    max: {
                      x: 0,
                      y: 0
                    },
                    min: {
                      x: 0,
                      y: 0
                    }
                  };
                };
                var _calculateSingleItemPanBounds = function _calculateSingleItemPanBounds2(item, realPanElementW, realPanElementH) {
                  var bounds = item.bounds;
                  bounds.center.x = Math.round((_tempPanAreaSize.x - realPanElementW) / 2);
                  bounds.center.y = Math.round((_tempPanAreaSize.y - realPanElementH) / 2) + item.vGap.top;
                  bounds.max.x = realPanElementW > _tempPanAreaSize.x ? Math.round(_tempPanAreaSize.x - realPanElementW) : bounds.center.x;
                  bounds.max.y = realPanElementH > _tempPanAreaSize.y ? Math.round(_tempPanAreaSize.y - realPanElementH) + item.vGap.top : bounds.center.y;
                  bounds.min.x = realPanElementW > _tempPanAreaSize.x ? 0 : bounds.center.x;
                  bounds.min.y = realPanElementH > _tempPanAreaSize.y ? item.vGap.top : bounds.center.y;
                };
                var _calculateItemSize = function _calculateItemSize2(item, viewportSize, zoomLevel) {
                  if (item.src && !item.loadError) {
                    var isInitial = !zoomLevel;
                    if (isInitial) {
                      if (!item.vGap) {
                        item.vGap = {
                          top: 0,
                          bottom: 0
                        };
                      }
                      _shout("parseVerticalMargin", item);
                    }
                    _tempPanAreaSize.x = viewportSize.x;
                    _tempPanAreaSize.y = viewportSize.y - item.vGap.top - item.vGap.bottom;
                    if (isInitial) {
                      var hRatio = _tempPanAreaSize.x / item.w;
                      var vRatio = _tempPanAreaSize.y / item.h;
                      item.fitRatio = hRatio < vRatio ? hRatio : vRatio;
                      var scaleMode = _options.scaleMode;
                      if (scaleMode === "orig") {
                        zoomLevel = 1;
                      } else if (scaleMode === "fit") {
                        zoomLevel = item.fitRatio;
                      }
                      if (zoomLevel > 1) {
                        zoomLevel = 1;
                      }
                      item.initialZoomLevel = zoomLevel;
                      if (!item.bounds) {
                        item.bounds = _getZeroBounds();
                      }
                    }
                    if (!zoomLevel) {
                      return;
                    }
                    _calculateSingleItemPanBounds(item, item.w * zoomLevel, item.h * zoomLevel);
                    if (isInitial && zoomLevel === item.initialZoomLevel) {
                      item.initialPosition = item.bounds.center;
                    }
                    return item.bounds;
                  } else {
                    item.w = item.h = 0;
                    item.initialZoomLevel = item.fitRatio = 1;
                    item.bounds = _getZeroBounds();
                    item.initialPosition = item.bounds.center;
                    return item.bounds;
                  }
                };
                var _appendImage = function _appendImage2(index, item, baseDiv, img, preventAnimation, keepPlaceholder) {
                  if (item.loadError) {
                    return;
                  }
                  if (img) {
                    item.imageAppended = true;
                    _setImageSize(item, img, item === self.currItem && _renderMaxResolution);
                    baseDiv.appendChild(img);
                    if (keepPlaceholder) {
                      setTimeout(function() {
                        if (item && item.loaded && item.placeholder) {
                          item.placeholder.style.display = "none";
                          item.placeholder = null;
                        }
                      }, 500);
                    }
                  }
                };
                var _preloadImage = function _preloadImage2(item) {
                  item.loading = true;
                  item.loaded = false;
                  var img = item.img = helper.createEl("zvui-pinch__img", "img");
                  var onComplete = function onComplete2() {
                    item.loading = false;
                    item.loaded = true;
                    if (item.loadComplete) {
                      item.loadComplete(item);
                    } else {
                      item.img = null;
                    }
                    img.onload = img.onerror = null;
                    img = null;
                  };
                  img.onload = onComplete;
                  img.onerror = function() {
                    item.loadError = true;
                    onComplete();
                  };
                  img.src = item.src;
                  return img;
                };
                var _checkForError = function _checkForError2(item, cleanUp) {
                  if (item.src && item.loadError && item.container) {
                    if (cleanUp) {
                      item.container.innerHTML = "";
                    }
                    item.container.innerHTML = _options.errorMsg.replace("%url%", item.src);
                    return true;
                  }
                };
                var _setImageSize = function _setImageSize2(item, img, maxRes) {
                  if (!item.src) {
                    return;
                  }
                  if (!img) {
                    img = item.container.lastChild;
                  }
                  var w = maxRes ? item.w : Math.round(item.w * item.fitRatio);
                  var h = maxRes ? item.h : Math.round(item.h * item.fitRatio);
                  if (item.placeholder && !item.loaded) {
                    item.placeholder.style.width = w + "px";
                    item.placeholder.style.height = h + "px";
                  }
                  img.style.width = w + "px";
                  img.style.height = h + "px";
                };
                var _appendImagesPool = function _appendImagesPool2() {
                  if (_imagesToAppendPool.length) {
                    var poolItem = void 0;
                    for (var i = 0; i < _imagesToAppendPool.length; i++) {
                      poolItem = _imagesToAppendPool[i];
                      if (poolItem.holder.index === poolItem.index) {
                        _appendImage(poolItem.index, poolItem.item, poolItem.baseDiv, poolItem.img, false, poolItem.clearPlaceholder);
                      }
                    }
                    _imagesToAppendPool = [];
                  }
                };
                _registerModule("Controller", {
                  publicMethods: {
                    lazyLoadItem: function lazyLoadItem(index) {
                      index = _getLoopedId(index);
                      var item = _getItemAt(index);
                      if (!item || (item.loaded || item.loading) && !_itemsNeedUpdate) {
                        return;
                      }
                      _shout("gettingData", index, item);
                      if (!item.src) {
                        return;
                      }
                      _preloadImage(item);
                    },
                    initController: function initController() {
                      helper.extend(_options, _controllerDefaultOptions, true);
                      self.items = _items = items;
                      _getItemAt = self.getItemAt;
                      _getNumItems = _options.getNumItemsFn;
                      _initialIsLoop = _options.loop;
                      if (_getNumItems() < 3) {
                        _options.loop = false;
                      }
                      _listen("beforeChange", function(diff) {
                        var p3 = _options.preload;
                        var isNext = diff === null ? true : diff >= 0;
                        var preloadBefore = Math.min(p3[0], _getNumItems());
                        var preloadAfter = Math.min(p3[1], _getNumItems());
                        var i = void 0;
                        for (i = 1; i <= (isNext ? preloadAfter : preloadBefore); i++) {
                          self.lazyLoadItem(_currentItemIndex + i);
                        }
                        for (i = 1; i <= (isNext ? preloadBefore : preloadAfter); i++) {
                          self.lazyLoadItem(_currentItemIndex - i);
                        }
                      });
                      _listen("initialLayout", function() {
                        self.currItem.initialLayout = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
                      });
                      _listen("mainScrollAnimComplete", _appendImagesPool);
                      _listen("initialZoomInEnd", _appendImagesPool);
                      _listen("destroy", function() {
                        var item = void 0;
                        for (var i = 0; i < _items.length; i++) {
                          item = _items[i];
                          if (item.container) {
                            item.container = null;
                          }
                          if (item.placeholder) {
                            item.placeholder = null;
                          }
                          if (item.img) {
                            item.img = null;
                          }
                          if (item.preloader) {
                            item.preloader = null;
                          }
                          if (item.loadError) {
                            item.loaded = item.loadError = false;
                          }
                        }
                        _imagesToAppendPool = null;
                      });
                    },
                    getItemAt: function getItemAt(index) {
                      if (index >= 0) {
                        return _items[index] !== void 0 ? _items[index] : false;
                      }
                      return false;
                    },
                    allowProgressiveImg: function allowProgressiveImg() {
                      return _options.forceProgressiveLoading || !_likelyTouchDevice || _options.mouseUsed || screen.width > 1200;
                    },
                    setContent: function setContent(holder, index) {
                      if (_options.loop) {
                        index = _getLoopedId(index);
                      }
                      var prevItem = self.getItemAt(holder.index);
                      if (prevItem) {
                        prevItem.container = null;
                      }
                      var item = self.getItemAt(index);
                      var img = void 0;
                      if (!item) {
                        holder.el.innerHTML = "";
                        return;
                      }
                      _shout("gettingData", index, item);
                      holder.index = index;
                      holder.item = item;
                      var baseDiv = item.container = helper.createEl("zvui-pinch__zoom-wrap");
                      if (!item.src && item.html) {
                        if (item.html.tagName) {
                          baseDiv.appendChild(item.html);
                        } else {
                          baseDiv.innerHTML = item.html;
                        }
                      }
                      _checkForError(item);
                      _calculateItemSize(item, _viewportSize);
                      if (item.src && !item.loadError && !item.loaded) {
                        item.loadComplete = function(item2) {
                          if (!_isOpen) {
                            return;
                          }
                          if (holder && holder.index === index) {
                            if (_checkForError(item2, true)) {
                              item2.loadComplete = item2.img = null;
                              _calculateItemSize(item2, _viewportSize);
                              _applyZoomPanToItem(item2);
                              if (holder.index === _currentItemIndex) {
                                self.updateCurrZoomItem();
                              }
                              return;
                            }
                            if (!item2.imageAppended) {
                              if (_features.transform && (_mainScrollAnimating || _initialZoomRunning)) {
                                _imagesToAppendPool.push({
                                  item: item2,
                                  baseDiv,
                                  img: item2.img,
                                  index,
                                  holder,
                                  clearPlaceholder: true
                                });
                              } else {
                                _appendImage(index, item2, baseDiv, item2.img, _mainScrollAnimating || _initialZoomRunning, true);
                              }
                            } else {
                              if (!_initialZoomRunning && item2.placeholder) {
                                item2.placeholder.style.display = "none";
                                item2.placeholder = null;
                              }
                            }
                          }
                          item2.loadComplete = null;
                          item2.img = null;
                          _shout("imageLoadComplete", index, item2);
                        };
                        if (helper.features.transform) {
                          var placeholderClassName = "zvui-pinch__img zvui-pinch__img--placeholder";
                          placeholderClassName += item.msrc ? "" : " zvui-pinch__img--placeholder--blank";
                          var placeholder = helper.createEl(placeholderClassName, item.msrc ? "img" : "");
                          if (item.msrc) {
                            placeholder.src = item.msrc;
                          }
                          _setImageSize(item, placeholder);
                          baseDiv.appendChild(placeholder);
                          item.placeholder = placeholder;
                        }
                        if (!item.loading) {
                          _preloadImage(item);
                        }
                        if (self.allowProgressiveImg()) {
                          if (!_initialContentSet && _features.transform) {
                            _imagesToAppendPool.push({
                              item,
                              baseDiv,
                              img: item.img,
                              index,
                              holder
                            });
                          } else {
                            _appendImage(index, item, baseDiv, item.img, true, true);
                          }
                        }
                      } else if (item.src && !item.loadError) {
                        img = helper.createEl("zvui-pinch__img", "img");
                        img.style.opacity = 1;
                        img.src = item.src;
                        _setImageSize(item, img);
                        _appendImage(index, item, baseDiv, img, true);
                      }
                      if (!_initialContentSet && index === _currentItemIndex) {
                        _currZoomElementStyle = baseDiv.style;
                        _showOrHide(item, img || item.img);
                      } else {
                        _applyZoomPanToItem(item);
                      }
                      holder.el.innerHTML = "";
                      holder.el.appendChild(baseDiv);
                    },
                    cleanSlide: function cleanSlide(item) {
                      if (item.img) {
                        item.img.onload = item.img.onerror = null;
                      }
                      item.loaded = item.loading = item.img = item.imageAppended = false;
                    }
                  }
                });
                var tapTimer = void 0;
                var tapReleasePoint = {};
                var _dispatchTapEvent = function _dispatchTapEvent2(origEvent, releasePoint, pointerType) {
                  var e = document.createEvent("CustomEvent");
                  var eDetail = {
                    origEvent,
                    target: origEvent.target,
                    releasePoint,
                    pointerType: pointerType || "touch"
                  };
                  e.initCustomEvent("zvuiPinchTap", true, true, eDetail);
                  origEvent.target.dispatchEvent(e);
                };
                _registerModule("Tap", {
                  publicMethods: {
                    initTap: function initTap() {
                      _listen("firstTouchStart", self.onTapStart);
                      _listen("touchRelease", self.onTapRelease);
                      _listen("destroy", function() {
                        tapReleasePoint = {};
                        tapTimer = null;
                      });
                    },
                    onTapStart: function onTapStart(touchList) {
                      if (touchList.length > 1) {
                        clearTimeout(tapTimer);
                        tapTimer = null;
                      }
                    },
                    onTapRelease: function onTapRelease(e, releasePoint) {
                      if (!releasePoint) {
                        return;
                      }
                      if (!_moved && !_isMultitouch && !_numAnimations) {
                        var p0 = releasePoint;
                        if (tapTimer) {
                          clearTimeout(tapTimer);
                          tapTimer = null;
                          if (_isNearbyPoints(p0, tapReleasePoint)) {
                            _shout("doubleTap", p0);
                            return;
                          }
                        }
                        if (releasePoint.type === "mouse") {
                          _dispatchTapEvent(e, releasePoint, "mouse");
                          return;
                        }
                        var clickedTagName = e.target.tagName.toUpperCase();
                        if (clickedTagName === "BUTTON" || helper.hasClass(e.target, "zvui-pinch__single-tap")) {
                          _dispatchTapEvent(e, releasePoint);
                          return;
                        }
                        _equalizePoints(tapReleasePoint, p0);
                        tapTimer = setTimeout(function() {
                          _dispatchTapEvent(e, releasePoint);
                          tapTimer = null;
                        }, 300);
                      }
                    }
                  }
                });
                helper.extend(self, publicMethods);
              };
            });
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            "use strict";
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            (function(root, factory) {
              if (true) {
                !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports2, __webpack_require__, exports2, module2) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else if ((typeof exports2 === "undefined" ? "undefined" : _typeof(exports2)) === "object") {
                module2.exports = factory(__require, exports2, module2);
              } else {
                root.ZVUIPinch_Default = factory();
              }
            })(void 0, function(require2, exports3, module3) {
              return function(zvuiPinch, helper) {
                var ui = this;
                var _overlayUIUpdated = false;
                var _controlsVisible = true;
                var _fullscrenAPI = void 0;
                var _controls = void 0;
                var _captionContainer = void 0;
                var _fakeCaptionContainer = void 0;
                var _indexIndicator = void 0;
                var _initalCloseOnScrollValue = void 0;
                var _isIdle = void 0;
                var _listen = void 0;
                var _loadingIndicator = void 0;
                var _loadingIndicatorHidden = void 0;
                var _loadingIndicatorTimeout = void 0;
                var _galleryHasOneSlide = void 0;
                var _options = void 0;
                var _defaultUIOptions = {
                  barsSize: {
                    top: 44,
                    bottom: "auto"
                  },
                  closeElClasses: ["item", "caption", "zoom-wrap", "ui", "top-bar"],
                  timeToIdle: 4e3,
                  timeToIdleOutside: 1e3,
                  loadingIndicatorDelay: 100,
                  // 2s
                  addCaptionHTMLFn: function addCaptionHTMLFn(item, captionEl) {
                    if (!item.title) {
                      captionEl.children[0].innerHTML = "";
                      return false;
                    }
                    captionEl.children[0].innerHTML = item.title;
                    return true;
                  },
                  closeEl: true,
                  captionEl: false,
                  fullscreenEl: false,
                  zoomEl: true,
                  counterEl: false,
                  arrowEl: false,
                  preloaderEl: true,
                  tapToClose: true,
                  tapToToggleControls: true,
                  clickToCloseNonZoomable: true,
                  indexIndicatorSep: " / ",
                  fitControlsWidth: 1200
                };
                var _blockControlsTap = void 0;
                var _blockControlsTapTimeout = void 0;
                var _onControlsTap = function _onControlsTap2(e) {
                  if (_blockControlsTap) {
                    return true;
                  }
                  e = e || window.event;
                  if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {
                    _onIdleMouseMove();
                  }
                  var target = e.target || e.srcElement;
                  var uiElement = void 0;
                  var clickedClass = target.getAttribute("class") || "";
                  var found = void 0;
                  for (var i = 0; i < _uiElements.length; i++) {
                    uiElement = _uiElements[i];
                    if (uiElement.onTap && clickedClass.includes("zvui-pinch__" + uiElement.name)) {
                      uiElement.onTap();
                      found = true;
                    }
                  }
                  if (found) {
                    if (e.stopPropagation) {
                      e.stopPropagation();
                    }
                    _blockControlsTap = true;
                    var tapDelay = helper.features.isOldAndroid ? 600 : 30;
                    _blockControlsTapTimeout = setTimeout(function() {
                      _blockControlsTap = false;
                    }, tapDelay);
                  }
                };
                var _fitControlsInViewport = function _fitControlsInViewport2() {
                  return !zvuiPinch.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;
                };
                var _toggleZvuiPinchClass = function _toggleZvuiPinchClass2(el, cName, add) {
                  helper[(add ? "add" : "remove") + "Class"](el, "zvui-pinch__" + cName);
                };
                var _countNumItems = function _countNumItems2() {
                  var hasOneSlide = _options.getNumItemsFn() === 1;
                  if (hasOneSlide !== _galleryHasOneSlide) {
                    _toggleZvuiPinchClass(_controls, "ui--one-slide", hasOneSlide);
                    _galleryHasOneSlide = hasOneSlide;
                  }
                };
                var _hasCloseClass = function _hasCloseClass2(target) {
                  for (var i = 0; i < _options.closeElClasses.length; i++) {
                    if (helper.hasClass(target, "zvui-pinch__" + _options.closeElClasses[i])) {
                      return true;
                    }
                  }
                };
                var _idleInterval = void 0;
                var _idleTimer = void 0;
                var _idleIncrement = 0;
                var _onIdleMouseMove = function _onIdleMouseMove2() {
                  clearTimeout(_idleTimer);
                  _idleIncrement = 0;
                  if (_isIdle) {
                    ui.setIdle(false);
                  }
                };
                var _onMouseLeaveWindow = function _onMouseLeaveWindow2(e) {
                  e = e ? e : window.event;
                  var from = e.relatedTarget || e.toElement;
                  if (!from || from.nodeName === "HTML") {
                    clearTimeout(_idleTimer);
                    _idleTimer = setTimeout(function() {
                      ui.setIdle(true);
                    }, _options.timeToIdleOutside);
                  }
                };
                var _setupFullscreenAPI = function _setupFullscreenAPI2() {
                  if (_options.fullscreenEl && !helper.features.isOldAndroid) {
                    if (!_fullscrenAPI) {
                      _fullscrenAPI = ui.getFullscreenAPI();
                    }
                    if (_fullscrenAPI) {
                      helper.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
                      ui.updateFullscreen();
                      helper.addClass(zvuiPinch.template, "zvui-pinch--supports-fs");
                    } else {
                      helper.removeClass(zvuiPinch.template, "zvui-pinch--supports-fs");
                    }
                  }
                };
                var _setupLoadingIndicator = function _setupLoadingIndicator2() {
                  if (_options.preloaderEl) {
                    _toggleLoadingIndicator(true);
                    _listen("beforeChange", function() {
                      clearTimeout(_loadingIndicatorTimeout);
                      _loadingIndicatorTimeout = setTimeout(function() {
                        if (zvuiPinch.currItem && zvuiPinch.currItem.loading) {
                          if (!zvuiPinch.allowProgressiveImg() || zvuiPinch.currItem.img && !zvuiPinch.currItem.img.naturalWidth) {
                            _toggleLoadingIndicator(false);
                          }
                        } else {
                          _toggleLoadingIndicator(true);
                        }
                      }, _options.loadingIndicatorDelay);
                    });
                    _listen("imageLoadComplete", function(index, item) {
                      if (zvuiPinch.currItem === item) {
                        _toggleLoadingIndicator(true);
                      }
                    });
                  }
                };
                var _toggleLoadingIndicator = function _toggleLoadingIndicator2(hide) {
                  if (_loadingIndicatorHidden !== hide) {
                    _toggleZvuiPinchClass(_loadingIndicator, "preloader--active", !hide);
                    _loadingIndicatorHidden = hide;
                  }
                };
                var _applyNavBarGaps = function _applyNavBarGaps2(item) {
                  var gap = item.vGap;
                  if (_fitControlsInViewport()) {
                    var bars = _options.barsSize;
                    if (_options.captionEl && bars.bottom === "auto") {
                      if (!_fakeCaptionContainer) {
                        _fakeCaptionContainer = helper.createEl("zvui-pinch__caption zvui-pinch__caption--fake");
                        _fakeCaptionContainer.appendChild(helper.createEl("zvui-pinch__caption__center"));
                        _controls.insertBefore(_fakeCaptionContainer, _captionContainer);
                        helper.addClass(_controls, "zvui-pinch__ui--fit");
                      }
                      if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {
                        var captionSize = _fakeCaptionContainer.clientHeight;
                        gap.bottom = parseInt(captionSize, 10) || 44;
                      } else {
                        gap.bottom = bars.top;
                      }
                    } else {
                      gap.bottom = bars.bottom === "auto" ? 0 : bars.bottom;
                    }
                    gap.top = bars.top;
                  } else {
                    gap.top = gap.bottom = 0;
                  }
                };
                var _setupIdle = function _setupIdle2() {
                  if (_options.timeToIdle) {
                    _listen("mouseUsed", function() {
                      helper.bind(document, "mousemove", _onIdleMouseMove);
                      helper.bind(document, "mouseout", _onMouseLeaveWindow);
                      _idleInterval = setInterval(function() {
                        _idleIncrement++;
                        if (_idleIncrement === 2) {
                          ui.setIdle(true);
                        }
                      }, _options.timeToIdle / 2);
                    });
                  }
                };
                var _setupHidingControlsDuringGestures = function _setupHidingControlsDuringGestures2() {
                  _listen("onVerticalDrag", function(now) {
                    if (_controlsVisible && now < 0.95) {
                      ui.hideControls();
                    } else if (!_controlsVisible && now >= 0.95) {
                      ui.showControls();
                    }
                  });
                  var pinchControlsHidden = void 0;
                  _listen("onPinchClose", function(now) {
                    if (_controlsVisible && now < 0.9) {
                      ui.hideControls();
                      pinchControlsHidden = true;
                    } else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {
                      ui.showControls();
                    }
                  });
                  _listen("zoomGestureEnded", function() {
                    pinchControlsHidden = false;
                    if (pinchControlsHidden && !_controlsVisible) {
                      ui.showControls();
                    }
                  });
                };
                var _uiElements = [{
                  name: "button--zoom",
                  option: "zoomEl",
                  onTap: zvuiPinch.toggleDesktopZoom
                }, {
                  name: "button--close",
                  option: "closeEl",
                  onTap: zvuiPinch.close
                }, {
                  name: "button--fs",
                  option: "fullscreenEl",
                  onTap: function onTap() {
                    if (_fullscrenAPI.isFullscreen()) {
                      _fullscrenAPI.exit();
                    } else {
                      _fullscrenAPI.enter();
                    }
                  }
                }, {
                  name: "preloader",
                  option: "preloaderEl",
                  onInit: function onInit(el) {
                    _loadingIndicator = el;
                  }
                }];
                var _setupUIElements = function _setupUIElements2() {
                  var item = void 0;
                  var classAttr = void 0;
                  var uiElement = void 0;
                  var loopThroughChildElements = function loopThroughChildElements2(sChildren) {
                    if (!sChildren) {
                      return;
                    }
                    var l = sChildren.length;
                    for (var i = 0; i < l; i++) {
                      item = sChildren[i];
                      classAttr = item.className;
                      for (var a = 0; a < _uiElements.length; a++) {
                        uiElement = _uiElements[a];
                        if (classAttr.includes("zvui-pinch__" + uiElement.name)) {
                          if (_options[uiElement.option]) {
                            helper.removeClass(item, "zvui-pinch__element--disabled");
                            if (uiElement.onInit) {
                              uiElement.onInit(item);
                            }
                          } else {
                            helper.addClass(item, "zvui-pinch__element--disabled");
                          }
                        }
                      }
                    }
                  };
                  loopThroughChildElements(_controls.children);
                  var topBar = helper.getChildByClass(_controls, "zvui-pinch__top-bar");
                  if (topBar) {
                    loopThroughChildElements(topBar.children);
                  }
                };
                ui.init = function() {
                  helper.extend(zvuiPinch.options, _defaultUIOptions, true);
                  _options = zvuiPinch.options;
                  _controls = helper.getChildByClass(zvuiPinch.scrollWrap, "zvui-pinch__ui");
                  _listen = zvuiPinch.listen;
                  _setupHidingControlsDuringGestures();
                  _listen("beforeChange", ui.update);
                  _listen("doubleTap", function(point) {
                    var initialZoomLevel = zvuiPinch.currItem.initialZoomLevel;
                    if (zvuiPinch.getZoomLevel() !== initialZoomLevel) {
                      zvuiPinch.zoomTo(initialZoomLevel, point, 333);
                    } else {
                      zvuiPinch.zoomTo(_options.getDoubleTapZoom(false, zvuiPinch.currItem), point, 333);
                    }
                  });
                  _listen("preventDragEvent", function(e, isDown, preventObj) {
                    var t = e.target || e.srcElement;
                    if (t && t.getAttribute("class") && e.type.includes("mouse") && (t.getAttribute("class").indexOf("__caption") > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {
                      preventObj.prevent = false;
                    }
                  });
                  _listen("bindEvents", function() {
                    helper.bind(_controls, "zvuiPinchTap click", _onControlsTap);
                    helper.bind(zvuiPinch.scrollWrap, "zvuiPinchTap", ui.onGlobalTap);
                    if (!zvuiPinch.likelyTouchDevice) {
                      helper.bind(zvuiPinch.scrollWrap, "mouseover", ui.onMouseOver);
                    }
                  });
                  _listen("unbindEvents", function() {
                    if (_idleInterval) {
                      clearInterval(_idleInterval);
                    }
                    helper.unbind(document, "mouseout", _onMouseLeaveWindow);
                    helper.unbind(document, "mousemove", _onIdleMouseMove);
                    helper.unbind(_controls, "zvuiPinchTap click", _onControlsTap);
                    helper.unbind(zvuiPinch.scrollWrap, "zvuiPinchTap", ui.onGlobalTap);
                    helper.unbind(zvuiPinch.scrollWrap, "mouseover", ui.onMouseOver);
                    if (_fullscrenAPI) {
                      helper.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
                      if (_fullscrenAPI.isFullscreen()) {
                        _options.hideAnimationDuration = 0;
                        _fullscrenAPI.exit();
                      }
                      _fullscrenAPI = null;
                    }
                  });
                  _listen("destroy", function() {
                    if (_options.captionEl) {
                      if (_fakeCaptionContainer) {
                        _controls.removeChild(_fakeCaptionContainer);
                      }
                      helper.removeClass(_captionContainer, "zvui-pinch__caption--empty");
                    }
                    helper.removeClass(_controls, "zvui-pinch__ui--over-close");
                    helper.addClass(_controls, "zvui-pinch__ui--hidden");
                    ui.setIdle(false);
                  });
                  if (!_options.showAnimationDuration) {
                    helper.removeClass(_controls, "zvui-pinch__ui--hidden");
                  }
                  _listen("initialZoomIn", function() {
                    if (_options.showAnimationDuration) {
                      helper.removeClass(_controls, "zvui-pinch__ui--hidden");
                    }
                  });
                  _listen("initialZoomOut", function() {
                    helper.addClass(_controls, "zvui-pinch__ui--hidden");
                  });
                  _listen("parseVerticalMargin", _applyNavBarGaps);
                  _setupUIElements();
                  _countNumItems();
                  _setupIdle();
                  _setupFullscreenAPI();
                  _setupLoadingIndicator();
                };
                ui.setIdle = function(isIdle) {
                  _isIdle = isIdle;
                  _toggleZvuiPinchClass(_controls, "ui--idle", isIdle);
                };
                ui.update = function() {
                  if (_controlsVisible && zvuiPinch.currItem) {
                    ui.updateIndexIndicator();
                    if (_options.captionEl) {
                      _options.addCaptionHTMLFn(zvuiPinch.currItem, _captionContainer);
                      _toggleZvuiPinchClass(_captionContainer, "caption--empty", !zvuiPinch.currItem.title);
                    }
                    _overlayUIUpdated = true;
                  } else {
                    _overlayUIUpdated = false;
                  }
                  _countNumItems();
                };
                ui.updateFullscreen = function(e) {
                  if (e) {
                    setTimeout(function() {
                      zvuiPinch.setScrollOffset(0, helper.getScrollY());
                    }, 50);
                  }
                  helper[(_fullscrenAPI.isFullscreen() ? "add" : "remove") + "Class"](zvuiPinch.template, "zvui-pinch--fs");
                };
                ui.updateIndexIndicator = function() {
                  if (_options.counterEl) {
                    _indexIndicator.innerHTML = zvuiPinch.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();
                  }
                };
                ui.onGlobalTap = function(e) {
                  e = e || window.event;
                  var target = e.target || e.srcElement;
                  if (_blockControlsTap) {
                    return;
                  }
                  if (e.detail && e.detail.pointerType === "mouse") {
                    if (_hasCloseClass(target)) {
                      zvuiPinch.close();
                      return;
                    }
                    if (helper.hasClass(target, "zvui-pinch__img")) {
                      if (zvuiPinch.getZoomLevel() === 1 && zvuiPinch.getZoomLevel() <= zvuiPinch.currItem.fitRatio) {
                        if (_options.clickToCloseNonZoomable) {
                          zvuiPinch.close();
                        }
                      } else {
                        zvuiPinch.toggleDesktopZoom(e.detail.releasePoint);
                      }
                    }
                  } else {
                    if (_options.tapToToggleControls) {
                      if (_controlsVisible) {
                        ui.hideControls();
                      } else {
                        ui.showControls();
                      }
                    }
                    if (_options.tapToClose && (helper.hasClass(target, "zvui-pinch__img") || _hasCloseClass(target))) {
                      zvuiPinch.close();
                      return;
                    }
                  }
                };
                ui.onMouseOver = function(e) {
                  e = e || window.event;
                  var target = e.target || e.srcElement;
                  _toggleZvuiPinchClass(_controls, "ui--over-close", _hasCloseClass(target));
                };
                ui.hideControls = function() {
                  helper.addClass(_controls, "zvui-pinch__ui--hidden");
                  _controlsVisible = false;
                };
                ui.showControls = function() {
                  _controlsVisible = true;
                  if (!_overlayUIUpdated) {
                    ui.update();
                  }
                  helper.removeClass(_controls, "zvui-pinch__ui--hidden");
                };
                ui.supportsFullscreen = function() {
                  var d = document;
                  return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
                };
                ui.getFullscreenAPI = function() {
                  var dE = document.documentElement;
                  var api = void 0;
                  var tF = "fullscreenchange";
                  if (dE.requestFullscreen) {
                    api = {
                      enterK: "requestFullscreen",
                      exitK: "exitFullscreen",
                      elementK: "fullscreenElement",
                      eventK: tF
                    };
                  } else if (dE.mozRequestFullScreen) {
                    api = {
                      enterK: "mozRequestFullScreen",
                      exitK: "mozCancelFullScreen",
                      elementK: "mozFullScreenElement",
                      eventK: "moz" + tF
                    };
                  } else if (dE.webkitRequestFullscreen) {
                    api = {
                      enterK: "webkitRequestFullscreen",
                      exitK: "webkitExitFullscreen",
                      elementK: "webkitFullscreenElement",
                      eventK: "webkit" + tF
                    };
                  } else if (dE.msRequestFullscreen) {
                    api = {
                      enterK: "msRequestFullscreen",
                      exitK: "msExitFullscreen",
                      elementK: "msFullscreenElement",
                      eventK: "MSFullscreenChange"
                    };
                  }
                  if (api) {
                    api.enter = function() {
                      _initalCloseOnScrollValue = _options.closeOnScroll;
                      _options.closeOnScroll = false;
                      if (this.enterK === "webkitRequestFullscreen") {
                        zvuiPinch.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
                      } else {
                        return zvuiPinch.template[this.enterK]();
                      }
                    };
                    api.exit = function() {
                      _options.closeOnScroll = _initalCloseOnScrollValue;
                      return document[this.exitK]();
                    };
                    api.isFullscreen = function() {
                      return document[this.elementK];
                    };
                  }
                  return api;
                };
              };
            });
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function() {
              "use strict";
              var hasOwn = {}.hasOwnProperty;
              function classNames() {
                var classes = [];
                for (var i = 0; i < arguments.length; i++) {
                  var arg = arguments[i];
                  if (!arg)
                    continue;
                  var argType = typeof arg;
                  if (argType === "string" || argType === "number") {
                    classes.push(arg);
                  } else if (Array.isArray(arg)) {
                    classes.push(classNames.apply(null, arg));
                  } else if (argType === "object") {
                    for (var key in arg) {
                      if (hasOwn.call(arg, key) && arg[key]) {
                        classes.push(key);
                      }
                    }
                  }
                }
                return classes.join(" ");
              }
              if (typeof module2 !== "undefined" && module2.exports) {
                module2.exports = classNames;
              } else if (true) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                  return classNames;
                }).apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
                window.classNames = classNames;
              }
            })();
          },
          /* 6 */
          /***/
          function(module2, exports2) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = ["beforeChange", "afterChange", "imageLoadComplete", "resize", "initialZoomIn", "initialZoomInEnd", "initialZoomOut", "initialZoomOutEnd", "close", "unbindEvents", "destroy", "updateScrollOffset", "preventDragEvent"];
          },
          /* 7 */
          /***/
          function(module2, exports2) {
            "use strict";
            function preserveCamelCase(str) {
              var isLastCharLower = false;
              for (var i = 0; i < str.length; i++) {
                var c = str.charAt(i);
                if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
                  str = str.substr(0, i) + "-" + str.substr(i);
                  isLastCharLower = false;
                  i++;
                } else {
                  isLastCharLower = c.toLowerCase() === c;
                }
              }
              return str;
            }
            module2.exports = function() {
              var str = [].map.call(arguments, function(str2) {
                return str2.trim();
              }).filter(function(str2) {
                return str2.length;
              }).join("-");
              if (!str.length) {
                return "";
              }
              if (str.length === 1) {
                return str.toLowerCase();
              }
              if (!/[_.\- ]+/.test(str)) {
                if (str === str.toUpperCase()) {
                  return str.toLowerCase();
                }
                if (str[0] !== str[0].toLowerCase()) {
                  return str[0].toLowerCase() + str.slice(1);
                }
                return str;
              }
              str = preserveCamelCase(str);
              return str.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, function(m, p1) {
                return p1.toUpperCase();
              });
            };
          },
          /* 8 */
          /***/
          function(module2, exports2) {
          }
          /******/
        ])
      );
    });
  }
});
export default require_react_pinch_zoom();
/*! Bundled license information:

react-pinch-zoom/dist/react-pinch-zoom.js:
  (*!
    Copyright (c) 2016 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-pinch-zoom.js.map
